{"version":3,"file":"component---src-pages-parallel-plot-js-13746909c12136a90a51.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/parallel-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Animation, Matplotlib } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport ChartImage from '../components/ChartImage';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\n\nconst quickCode = `# libraries\nimport pandas\nimport matplotlib.pyplot as plt\nfrom pandas.tools.plotting import parallel_coordinates\n\n# Take the iris dataset\nimport seaborn as sns\ndata = sns.load_dataset('iris')\n\n# Make the plot\nparallel_coordinates(data, 'species', colormap=plt.get_cmap(\"Set2\"))\nplt.show()\n`;\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/parallel.html'>parallel plot</a> plot allows to compare the feature of several individual observations (series) on a set of numeric variables. Interestingly, <code>Pandas</code> is probably the best way to plot a parallel coordinate plot with python. <code>Plotly</code> is a good alternative to plot interactive versions though.</p>\";\n\nexport default function Parallel() {\n  return (\n    <Layout\n      title=\"Parallel coordinate plot\"\n      isTocEnabled\n      seoDescription=\"A collection of parallel coordinate chart examples made with Python, coming with explanation and reproducible code\"\n    >\n      <TitleAndDescription\n        title=\"Parallel coordinate plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>Pandas</code> is probably the best way to make a parallel\n              coordinate plot. This library is most often used for data\n              wrangling, but it offers a <code>parallel_coordinates()</code>{' '}\n              function dedicated to it.ðŸ”¥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/150-parallel-plot-with-pandas'}>\n              <ChartImage\n                imgName=\"150_Parrallele_plot_with_pandas\"\n                caption=\"Most basic parallel plot with Python and Pandas.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">\n          Parallel coordinate chart with <code>Python</code> and{' '}\n          <code>Pandas</code>\n        </h2>\n        <p>\n          The following examples are dedicated to the{' '}\n          <code>parallel_coordinates()</code> function of <code>Pandas</code>.\n          It shows how to apply the most common types of customization.\n        </p>\n        <p>\n          If you need to go further, here is the complete{' '}\n          <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.parallel_coordinates.html\">\n            pandas documentation\n          </a>\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"150_Parrallele_plot_with_pandas\"\n            caption=\"Basic parallel coordinate char\"\n            linkTo=\"/150-parallel-plot-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          Parallel coordinate chart with <code>Seaborn</code>\n        </h2>\n        <p>\n          <Link href=\"/seaborn\">Seaborn</Link> and its <code>lineplot()</code>{' '}\n          function is another very good alternative when it comes to create\n          parallel coordinate charts with Python.{' '}\n        </p>\n        <p>\n          Used in conjunction with <Link href=\"/matplotlib\">matplotlib</Link>,\n          it allows to reach a great level of customization as shown in the\n          example below\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"501-parallel-plot-seaborn\"\n            caption=\"Basic parallel coordinate chart with Seaborn\"\n            linkTo=\"/501-parallel-plot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"web-slope-chart-matplotlib-square\"\n            caption=\"A polished slope chart made with Python, Seaborn and Matplotlib\"\n            linkTo=\"/web-slope-chart-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\">\n          <Animation />\n          Interactive parallel coordinate with <code>plotly</code>\n        </h2>\n        <p>\n          <code>Plotly</code> is a python library that makes the link with\n          Javascript to build interactive charts that you can display in a\n          browser.\n        </p>\n        <p>\n          The following example is a parallel chart made with this library and\n          the <code>parallel_coordinates()</code> function.\n        </p>\n        <div className=\"mx-auto\">\n          <iframe\n            src=\"/interactiveCharts/parallel-coordinate-plot-plotly.html\"\n            title=\"parallel coordinate chart with plotly\"\n            style={{ border: 'none', width: '800px', height: '500px' }}\n          ></iframe>\n        </div>\n        <Link to=\"/parallel-coordinate-plot-plotly\">\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\">\n          <Matplotlib />\n          From the web\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://www.python-graph-gallery.com\">\n            Python graph gallery\n          </a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={'/web-radar-chart-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-radar-chart-with-matplotlib-square'}\n                caption={\n                  'A radar chart can be an alternative to a parallel coordinate plot.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-lemurs-parallel-chart'}>\n              <ChartImage\n                imgName={'web-lemurs-parallel-chart-square'}\n                caption={\n                  'A parallel plot or slope chart with groups, legend, title and annotation.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","quickCode","chartDescription","Parallel","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Animation","src","style","border","width","height","Button","size","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}