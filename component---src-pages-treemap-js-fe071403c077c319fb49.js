"use strict";(self.webpackChunkthe_python_graph_gallery=self.webpackChunkthe_python_graph_gallery||[]).push([[6627],{7128:function(e,t,a){a.d(t,{Z:function(){return i}});var l=a(7294),n=a(4160),r=a(8032);const o=["animated_chart","animated_gapminder.gif","animated_volcano.gif"];function i(e){let{imgName:t,caption:a}=e;if(o.includes(t))return l.createElement("p",null,"TODO");const i=(0,n.K2)("2757772085").allFile.edges.find((e=>e.node.name.includes(t)));return i?l.createElement(l.Fragment,null,l.createElement("div",{className:"chartImageContainer"},l.createElement(r.G,{image:i.node.childImageSharp.gatsbyImageData,alt:a,className:"chartImageImg"}),a&&l.createElement("div",{className:"chartImageOverlay"},l.createElement("div",{className:"chartImageOverlayText"},l.createElement("p",null,a))))):null}},4596:function(e,t,a){a.d(t,{Z:function(){return i}});var l=a(7294),n=a(7128),r=a(1555),o=a(4160);function i(e){let{imgName:t,caption:a,linkTo:i}=e;return l.createElement(r.Z,{xs:12,md:4},l.createElement(o.rU,{to:i},l.createElement(n.Z,{imgName:t,caption:a})))}},9042:function(e,t,a){a.r(t),a.d(t,{default:function(){return Z}});var l=a(7294),n=a(429),r=a(1433),o=a(682),i=a(8728),c=a(4051),m=a(4596),p=a(8742),s=a(4160),u=a(4125),h=a(7128),d=a(1555),E=a(5005),f=a(2737),g=a(3921);const y="<p>A <a href='https://www.data-to-viz.com/graph/treemap.html'>treemap</a> displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. In <code>Python</code>, the <code>squarify</code> library allows to compute the rectangle positions and plot it.</p>",b="# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\n\n# Create a data frame with fake data\ndf = pd.DataFrame({'nb_people':[8,3,4,2], 'group':[\"group A\", \"group B\", \"group C\", \"group D\"] })\n\n# plot it\nsquarify.plot(sizes=df['nb_people'], label=df['group'], alpha=.8 )\nplt.axis('off')\nplt.show()\n";function Z(){return l.createElement(r.Z,{title:"Treemap",isTocEnabled:!0,seoDescription:"A collection of treemap examples made with Python, coming with explanation and reproducible code"},l.createElement(n.Z,{title:"Treemap",description:y}),l.createElement(o.Z,null,l.createElement("h2",{id:"Quick"},"‚è± Quick start"),l.createElement(c.Z,{className:"align-items-center"},l.createElement(d.Z,{md:6},l.createElement("p",null,"A ",l.createElement("code",null,"treemap")," displays each element of a dataset as a rectangle. It allows to see what proportion each element has compared to the whole."),l.createElement("p",null," This is doable with ",l.createElement("code",null,"python")," and ",l.createElement("code",null,"Matplotlib")," thanks to the ",l.createElement("code",null,"squarify")," library that can be used as follow:üî•")),l.createElement(d.Z,{md:6},l.createElement(s.rU,{to:"/200-basic-treemap-with-python"},l.createElement(h.Z,{imgName:"200_Basic_Treemap_with_squarify",caption:"Most basic Treemap with Python, Matplotlib and Squarify"})))),l.createElement(f.Z,null,b)),l.createElement(g.Z,null),l.createElement("div",{className:"greySection",id:"related"},l.createElement(o.Z,null,l.createElement("h2",{id:"Squarify"},"‚Ñπ Ô∏è A note on the ",l.createElement("code",null,"Squarify")," package"),l.createElement("p",null,"The squarify library is a pure Python implementation of the squarify treemap layout algorithm. It is a project developped by ",l.createElement("a",{href:"https://github.com/laserson"},"Uri Laserson")," that has its documentation on ",l.createElement("a",{href:"https://github.com/laserson/squarify"},"github"),"."),l.createElement("a",{href:"https://github.com/laserson/squarify"},l.createElement(E.Z,{size:"sm"},"Squarify documentation")))),l.createElement(g.Z,null),l.createElement(o.Z,null,l.createElement("h2",{id:"Matplotlib"},l.createElement(u.rS,null),"Treemap with ",l.createElement("code",null,"Matplotlib")," and ",l.createElement("code",null,"Squarify")),l.createElement("p",null,l.createElement("code",null,"Matplotlib")," is probably the most famous and flexible python library for data visualization. It is appropriate to build any kind of chart, including the lollipop plot thanks to its ",l.createElement("code",null,"stem()")," function."),l.createElement(c.Z,null,l.createElement(m.Z,{imgName:"201_Custom_Treemap1",caption:"How to control the color of your treemap",linkTo:"/201-control-the-color-of-treemap"}),l.createElement(m.Z,{imgName:"202_Treemap_map_color_to_size",caption:"How to make the rectangle colors relative to their values.",linkTo:"/202-treemap-with-colors-mapped-on-values"}))),l.createElement(g.Z,null),l.createElement("div",{className:"greySection",id:"related"},l.createElement(o.Z,null,l.createElement(p.Z,{chartFamily:"partOfAWhole"}))),l.createElement(g.Z,null),l.createElement(o.Z,null,l.createElement(i.Z,null)),l.createElement(g.Z,null))}}}]);
//# sourceMappingURL=component---src-pages-treemap-js-fe071403c077c319fb49.js.map