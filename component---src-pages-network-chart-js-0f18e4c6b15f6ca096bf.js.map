{"version":3,"file":"component---src-pages-network-chart-js-0f18e4c6b15f6ca096bf.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Col.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Row.js","webpack://the-python-graph-gallery/./src/components/ChartFamilySection.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SectionLogoWithOverlay.js","webpack://the-python-graph-gallery/./src/components/TitleAndDescription.js","webpack://the-python-graph-gallery/./src/pages/network-chart.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span;\n    var offset;\n    var order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"noGutters\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import \"./titleAndDescription.css\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SocialMediaButtons from \"./SocialMediaButtons\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"gatsby\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n// import Sponsors from \"../components/Sponsors\";\n\n// Note that the description received is a string that contains html.\n// It was not possible to pass JSX since it is sometimes passed directly from\n// the python notebooks metadata\nexport default function TitleAndDescription({ title, description, chartType }) {\n  const chartInfo = chartTypesInfo.filter((chart) => chart.id === chartType)[0];\n\n  return (\n    <>\n      <div className=\"titleAndDescription\">\n        <h1 className=\"mainTitle\">{title}</h1>\n        <hr className=\"smallHr\" />\n        <SocialMediaButtons />\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n        {chartType && (\n          <div style={{ marginTop: \"10px\" }}>\n            <Link to={fullUrlToInternalLink(chartInfo.pythonURL)}>\n              <Button size=\"sm\">{chartInfo.label + \" section\"}</Button>\n            </Link>\n            <a href={chartInfo.dataToVizURL}>\n              <Button size=\"sm\">About this chart</Button>\n            </a>\n          </div>\n        )}\n      </div>\n      {/* <Sponsors /> */}\n    </>\n  );\n}\n\nTitleAndDescription.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  chartType: PropTypes.string\n};\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/network.html'>Network diagram</a> (or chart, or graph) show interconnections between a set of entities. Each entity is represented by a node (or vertices). Connection between nodes are represented through links (or edges). This section mainly focuses on <code>NetworkX</code>, probably the best library for this kind of chart with <code>python</code>.\";\n\nexport default function Network() {\n\n  return (\n\n    <Layout title=\"Network chart\" isTocEnabled seoDescription=\"A collection of network chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Network chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"NetworkX\">Network diagram with the <code>NetworkX</code> library</h2>\n        <p>\n          <a href='https://networkx.org'>NetworkX</a> is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks..\n        </p>\n        <p>\n          The examples below will guide you through a migration dataset already discussed in <a href='https://www.data-to-viz.com/graph/chord.html'>data-to-viz.com</a>. It starts\n          by describing the input dataset and the basic usage of the <code>Chord()</code> function.\n        </p>\n        <a href='https://networkx.org'>\n          <Button size=\"sm\">\n            Official doc\n          </Button>\n        </a>\n        <br />\n        <br />\n        <Row>\n          <ChartImageContainer\n            imgName=\"320_Network_start_simple\"\n            caption=\"Most basic network chart with Python and NetworkX\"\n            linkTo=\"/320-basic-network-from-pandas-data-frame\"\n          />\n          <ChartImageContainer\n            imgName=\"321_Network_custom_look4\"\n            caption=\"Custom network appearance: color, shape, size, links\"\n            linkTo=\"/321-custom-networkx-graph-appearance\"\n          />\n          <ChartImageContainer\n            imgName=\"322_Network_layout4\"\n            caption=\"Control the layout used for the node location\"\n            linkTo=\"/322-network-layout-possibilities\"\n          />\n          <ChartImageContainer\n            imgName=\"323_Network_direction1\"\n            caption=\"Manage directed and undirected networks by adding arrows\"\n            linkTo=\"/323-directed-or-undirected-network\"\n          />\n          <ChartImageContainer\n            imgName=\"326_Network_background_color\"\n            caption=\"Control the background color of a network chart\"\n            linkTo=\"/326-background-colour-of-network-chart\"\n          />\n        </Row>\n        <br />\n        <p>A common need when dealing with network charts is to map a numeric or categorical\n        variable to the nodes or edges appearance. This is totally doable and adds some insight\n          to the figure.</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"324_Network_mapcolor1\"\n            caption=\"Map a continuous or categoric variable to nodes\"\n            linkTo=\"/324-map-a-color-to-network-nodes\"\n          />\n          <ChartImageContainer\n            imgName=\"325_Network_mapcolorttoedge1\"\n            caption=\"Map a color to edges\"\n            linkTo=\"/325-map-colour-to-the-edges-of-a-network\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Similarity matrix\">Network chart from similarity matrix</h2>\n        <p>Another commin task is to build a network chart from a correlation matrix. Let's say\n        you have several numeric variables describing some items in a dataset. You can compute\n        a similarity matrix and display it as a network chart. This process is described in the\n        <Link to='/327-network-from-correlation-matrix'>post #327</Link> below.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"327_Network_from_correlation\"\n            caption=\"Network chart from correlation matrix with Python and NetworkX\"\n            linkTo=\"/327-network-from-correlation-matrix\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Graph-tool\">Network diagram with <code>graph-tool</code></h2>\n        <p>\n          The <a href='https://graph-tool.skewed.de'>graph tool</a> library is a python library implemented in C++. It makes it highly efficient to draw networks containing many nodes. Graphics to come.\n        </p>\n        <a href='https://graph-tool.skewed.de'>\n          <Button size=\"sm\">\n            Official doc\n          </Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"flow\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["_excluded","DEVICE_SIZES","Col","_ref","ref","bsPrefix","className","_ref$as","as","Component","props","prefix","spans","classes","forEach","brkPoint","span","offset","order","propValue","_propValue$span","infix","push","length","concat","displayName","Row","noGutters","decoratedBsPrefix","sizePrefix","cols","defaultProps","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","map","flow","general","ChartFamilySection","chartFamily","allLogos","chartTypesInfo","chart","family","id","link","fullUrlToInternalLink","pythonURL","key","xs","md","chartType","logo","caption","label","allGifs","ChartImage","imgName","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","ChartImageContainer","linkTo","Link","to","generalList","info","SectionLogoWithOverlay","isGeneralFamily","TitleAndDescription","title","description","chartInfo","dangerouslySetInnerHTML","__html","style","marginTop","size","href","dataToVizURL","Network","isTocEnabled","seoDescription"],"sourceRoot":""}