{"version":3,"file":"component---src-pages-table-js-83d574b74a5b18393fad.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/table.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport ChartImage from '../components/ChartImage';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <b>table</b> is a structured arrangement of data in <b>rows</b> and{' '}\n      <b>columns</b> that allows for easy sorting, filtering, and analysis.\n    </p>\n    <p>\n      It can be used in data visualization to present information in a clear,\n      organized manner for quick comparison and interpretation.\n    </p>\n    <p>\n      Building a polished table in python is not easy. This page mainly relies\n      on <Link href=\"/pandas\">pandas</Link> that has the best set of helper\n      functions for tables\n    </p>\n  </>\n);\n\nconst quickCode = `# Create a dataframe\nimport pandas as pd\ndf = pd.DataFrame({'group':list(map(chr, range(65, 85))), 'values':np.random.uniform(size=20) })\n\n# Reorder it following the values:\nordered_df = df.sort_values(by='values')\nmy_range=range(1,len(df.index)+1)\n\n# Make the plot\nplt.stem(ordered_df['values'])\nplt.xticks( my_range, ordered_df['group'])\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Table\"\n    ch\n    seoDescription=\"A collection of table examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Lollipop() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Table\"\n        description={chartDescription}\n        chartType={'table'}\n      />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib /> Table with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <Link href=\"/matplotlib\">Matplotlib</Link> is probably the most famous\n          and flexible python library for data visualization. It is pretty\n          limited when it comes to building table though.\n        </p>\n        <p>\n          Here are a few examples where <code>matplotlib</code> is used to\n          create a table.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"552-table-combined-with-plot\"\n            caption=\"Stacked Barplot combined with a table\"\n            linkTo=\"/552-table-combined-with-plot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","href","Head","ch","Lollipop","Layout","isTocEnabled","TitleAndDescription","description","chartType","Container","id","Matplotlib","Row","Spacing","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}