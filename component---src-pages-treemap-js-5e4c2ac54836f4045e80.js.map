{"version":3,"file":"component---src-pages-treemap-js-5e4c2ac54836f4045e80.js","mappings":"4MAMMA,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIH,EAAQI,SAASF,GACnB,OACE,iCAGJ,IAuBMG,GAvBOC,EAAAA,EAAAA,gBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASF,MAG9B,OAAKG,EAMH,gCACE,uBAAKQ,UAAU,uBACb,gBAAC,IAAD,CACEC,IAAKX,EACLY,MAAOV,EAAMM,KAAKK,gBAAgBD,MAClCF,UAAU,kBAEZ,uBAAKA,UAAU,qBACb,uBAAKA,UAAU,yBACb,yBAAIV,OAdL,O,iGCvCI,SAASc,EAAT,GAA4D,IAA7Bf,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASe,EAAU,EAAVA,OAC9D,OACE,gBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,gBAAC,EAAAC,KAAD,CAAMC,GAAIJ,GACR,gBAAC,IAAD,CAAYhB,QAASA,EAASC,QAASA,Q,0NCyBhC,SAASoB,IAEtB,OAEE,gBAAC,IAAD,CAAQC,MAAM,UAAUC,cAAY,EAACC,eAAe,oGAElD,gBAAC,IAAD,CACEF,MAAM,UACNG,YA1BN,gVA6BI,gBAAC,IAAD,KACE,sBAAIC,GAAG,SAAP,iBACA,gBAAC,IAAD,CAAKf,UAAU,sBACb,gBAAC,IAAD,CAAKO,GAAI,GACP,8BAAK,uCAAL,gIAEA,iDAAwB,sCAAxB,QAAgD,0CAAhD,kBACI,wCADJ,2CAGF,gBAAC,IAAD,CAAKA,GAAI,GACP,gBAAC,EAAAC,KAAD,CAAMC,GAAI,kCACR,gBAAC,IAAD,CAAYpB,QAAQ,kCAClBC,QAAQ,+DAIhB,gBAAC,IAAD,KA1CO,4YA6CT,gBAAC,IAAD,MAEA,uBAAKU,UAAU,cAAce,GAAG,WAC9B,gBAAC,IAAD,KACE,sBAAIA,GAAG,YAAP,qBAAiD,wCAAjD,YACA,yJAC0D,qBAAGC,KAAK,+BAAR,gBAD1D,kCAE2B,qBAAGA,KAAK,wCAAR,UAF3B,KAGA,qBAAGA,KAAK,wCACN,gBAAC,IAAD,CAAQC,KAAK,MAAb,6BAKN,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIF,GAAG,cAAa,gBAAC,KAAD,MAApB,gBAA+C,0CAA/C,QAA2E,yCAC3E,yBACE,0CADF,4KAG8B,sCAH9B,cAKA,gBAAC,IAAD,KACE,gBAAC,IAAD,CACE1B,QAAQ,sBACRC,QAAQ,2CACRe,OAAO,sCAET,gBAAC,IAAD,CACEhB,QAAQ,gCACRC,QAAQ,6DACRe,OAAO,gDAKb,gBAAC,IAAD,MAEA,uBAAKL,UAAU,cAAce,GAAG,WAC9B,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAoBG,YAAY,mBAIpC,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,gBAAC,IAAD,OAGF,gBAAC,IAAD","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/treemap.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/treemap.html'>treemap</a> displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. In <code>Python</code>, the <code>squarify</code> library allows to compute the rectangle positions and plot it.</p>\";\n\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\n\n# Create a data frame with fake data\ndf = pd.DataFrame({'nb_people':[8,3,4,2], 'group':[\"group A\", \"group B\", \"group C\", \"group D\"] })\n\n# plot it\nsquarify.plot(sizes=df['nb_people'], label=df['group'], alpha=.8 )\nplt.axis('off')\nplt.show()\n`\n\n\nexport default function Treemap() {\n\n  return (\n\n    <Layout title=\"Treemap\" isTocEnabled seoDescription=\"A collection of treemap examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Treemap\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>A <code>treemap</code> displays each element of a dataset as a rectangle. It allows to\n            see what proportion each element has compared to the whole.</p>\n            <p> This is doable with <code>python</code> and <code>Matplotlib</code> thanks to\n            the <code>squarify</code> library that can be used as follow:ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/200-basic-treemap-with-python\"}>\n              <ChartImage imgName=\"200_Basic_Treemap_with_squarify\"\n                caption=\"Most basic Treemap with Python, Matplotlib and Squarify\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Squarify\">&#8505; &#65039; A note on the <code>Squarify</code> package</h2>\n          <p>The squarify library is a pure Python implementation of the squarify\n            treemap layout algorithm. It is a project developped by <a href=\"https://github.com/laserson\">Uri Laserson</a> that\n            has its documentation on <a href=\"https://github.com/laserson/squarify\">github</a>.</p>\n          <a href=\"https://github.com/laserson/squarify\">\n            <Button size=\"sm\">Squarify documentation</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Treemap with <code>Matplotlib</code> and <code>Squarify</code></h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible python library for data visualization.\n          It is appropriate to build any kind of chart, including the\n          lollipop plot thanks to its <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"201_Custom_Treemap1\"\n            caption=\"How to control the color of your treemap\"\n            linkTo=\"/201-control-the-color-of-treemap\"\n          />\n          <ChartImageContainer\n            imgName=\"202_Treemap_map_color_to_size\"\n            caption=\"How to make the rectangle colors relative to their values.\"\n            linkTo=\"/202-treemap-with-colors-mapped-on-values\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","Treemap","title","isTocEnabled","seoDescription","description","id","href","size","chartFamily"],"sourceRoot":""}