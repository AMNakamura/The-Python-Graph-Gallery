{"version":3,"file":"component---src-pages-2-d-density-plot-js-7114d18137fd257bccdf.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Col.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Row.js","webpack://the-python-graph-gallery/./src/components/ChartFamilySection.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SectionLogoWithOverlay.js","webpack://the-python-graph-gallery/./src/components/TitleAndDescription.js","webpack://the-python-graph-gallery/./src/pages/2d-density-plot.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span;\n    var offset;\n    var order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"noGutters\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n        <div className=\"sectionLogoContainer\">\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n        </div>\n      )}\n    </>\n  );\n}\n","import \"./titleAndDescription.css\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SocialMediaButtons from \"./SocialMediaButtons\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"gatsby\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n// import Sponsors from \"../components/Sponsors\";\n\n// Note that the description received is a string that contains html.\n// It was not possible to pass JSX since it is sometimes passed directly from\n// the python notebooks metadata\nexport default function TitleAndDescription({ title, description, chartType }) {\n  const chartInfo = chartTypesInfo.filter((chart) => chart.id === chartType)[0];\n\n  return (\n    <>\n      <div className=\"titleAndDescription\">\n        <h1 className=\"mainTitle\">{title}</h1>\n        <hr className=\"smallHr\" />\n        <SocialMediaButtons />\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n        {chartType && (\n          <div style={{ marginTop: \"10px\" }}>\n            <Link to={fullUrlToInternalLink(chartInfo.pythonURL)}>\n              <Button size=\"sm\">{chartInfo.label + \" section\"}</Button>\n            </Link>\n            <a href={chartInfo.dataToVizURL}>\n              <Button size=\"sm\">About this chart</Button>\n            </a>\n          </div>\n        )}\n      </div>\n      {/* <Sponsors /> */}\n    </>\n  );\n}\n\nTitleAndDescription.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  chartType: PropTypes.string\n};\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>This section explains how to build a <a href='https://www.data-to-viz.com/graph/density2d.html'>2d density chart</a> or a <a href='https://www.data-to-viz.com/graph/density2d.html'>2d histogram</a> with python. Those chart types allow to visualize the combined distribution of two quantitative variables. They can be build with <code>Matplotlib</code> or <code>Seaborn</code>.</p>\";\n\nexport default function Heatmap() {\n\n  return (\n\n    <Layout title=\"2d density chart\" isTocEnabled\n      seoDescription=\"A collection of 2d density chart examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"2D Density Chart\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">💡 What is a 2D density chart?</h2>\n          <p>There are several chart types allowing to visualize the distribution\n          of a combination of 2 numeric variables. They always have a variable represented on the X axis,\n          the other on the Y axis, like\n            for a <Link to='/scatter-plot'>scatterplot</Link> (left).</p>\n          <p>Then the number\n          of observations within a particular area of the 2D space is counted and represented\n          with a color gradient. The shape can vary: hexagones result in a <code>hexbin chart</code>, squares in a <code>2d histogram</code>.\n          A kernel density estimate can be used to get a <code>2d density plots</code> or a <code>contour plots</code></p>\n          <div style={{ maxWidth: '750px', margin: \"auto\" }}>\n            <Link to={\"/86-avoid-overlapping-in-scatterplot-with-2d-density\"}>\n              <ChartImage imgName=\"86_2D_density_plot_explanation\" caption={'Cheat sheet: line customization with matplotlib'} />\n            </Link>\n          </div>\n          <p>Confusing? Visit <a href='https://www.data-to-viz.com/graph/density2d.html'>data-to-viz</a> to clarify..</p>\n          <a href='https://www.data-to-viz.com/graph/density2d.html'>\n            <Button size=\"sm\">More viz explanation</Button>\n          </a>\n          <Link to='/86-avoid-overlapping-in-scatterplot-with-2d-density'>\n            <Button size=\"sm\">Show me the code</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Contour\"><Seaborn />Contour plot with <code>Seaborn</code></h2>\n        <p>\n          The contour plot can be easily built thanks to the <code>kdeplot()</code> function of the Seaborn library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot1\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot2\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot3\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"2d histogram\"><Seaborn />2D histogram with <code>Seaborn</code></h2>\n        <p>\n          Build a 2d histogram thanks to the <code>hist2d()</code> function of the <code>Seaborn</code> library. Do not\n          forget to play with the <code>bins</code> argument to find the value representing the best your data.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_3\"\n            caption=\"Basic 2D histogram with seaborn\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_5\"\n            caption=\"Control the color in the 2d histogram.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_6\"\n            caption=\"Black and white, color scale legend.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Hexbin\"><Matplotlib />Hexbin chart with <code>Matplotlib</code></h2>\n        <p>\n          Split the graph area in hexagones and you get a hexbin density chart. This time, it is <code>matplotlib</code> that gets you covered thanks to its <code>hexbin()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"84_hexbin_matplotlib_1\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"84_hexbin_matplotlib_3\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"2d density\"><Matplotlib />2d density chart with <code>Matplotlib</code></h2>\n        <p>\n          2D densities are computed thanks to the <code>gaussian_kde()</code> function and plotted thanks with the <code>pcolormesh()</code> function of <code>matplotlib()</code>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"85_2D_density_plot_matplotlib_1\"\n            caption=\"Basic 2d density chart.\"\n            linkTo=\"/85-density-plot-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"85_2D_density_plot_matplotlib_2\"\n            caption=\"How to customize the 2d density chart.\"\n            linkTo=\"/85-density-plot-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Marginal plot\"><Matplotlib />2d density and marginal plots</h2>\n        <p>\n          2D densities often combined with marginal distributions. It helps to highlight the distribution\n          of both variables individually. It is pretty straightforward to add thanks to the <code>jointplot()</code> function\n          of the <code>Seaborn</code> library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot2\"\n            caption=\"Marginal distribution and hexbin.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot3\"\n            caption=\"Marginal distribution and contour.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot5\"\n            caption=\"General customization.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["_excluded","DEVICE_SIZES","Col","_ref","ref","bsPrefix","className","_ref$as","as","Component","props","prefix","spans","classes","forEach","brkPoint","span","offset","order","propValue","_propValue$span","infix","push","length","concat","displayName","Row","noGutters","decoratedBsPrefix","sizePrefix","cols","defaultProps","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","map","flow","general","ChartFamilySection","chartFamily","allLogos","chartTypesInfo","chart","family","id","link","fullUrlToInternalLink","pythonURL","key","xs","md","chartType","logo","caption","label","allGifs","ChartImage","imgName","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","ChartImageContainer","linkTo","Link","to","generalList","info","SectionLogoWithOverlay","isGeneralFamily","TitleAndDescription","title","description","chartInfo","dangerouslySetInnerHTML","__html","style","marginTop","size","href","dataToVizURL","Heatmap","isTocEnabled","seoDescription","maxWidth","margin"],"sourceRoot":""}