{"version":3,"file":"component---src-pages-connected-scatter-plot-js-af4f065d0fd985f8fa24.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/connected-scatter-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>connected scatterplot</a> is a <a href='https://python-graph-gallery.com/line-chart/'>line chart</a> where each data point is shown by a circle or any type of marker. This section explains how to build a connected scatterplot with <code>Python</code>, using both the <code>Matplotlib</code> and the <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# library\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n# Create a dataset\ndf = pd.DataFrame(np.random.random((5,5)), columns=[\"a\",\"b\",\"c\",\"d\",\"e\"])\n\n# Default heatmap\np1 = sns.heatmap(df)\n`\n\nexport default function ConnectedScatter() {\n\n  return (\n\n    <Layout title=\"Connected Scatterplot\" isTocEnabled seoDescription=\"A collection of connected scatterplot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Connected Scatterplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>TODO.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/132-basic-connected-scatterplot\"}>\n              <ChartImage imgName=\"132_Matplotlib-connected-scatterplot\"\n                caption=\"Basic connected scatterplot with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Two types of connected scatterplot</h2>\n          <p>There are two types of connected scatterplot, and it often creates confusion.</p>\n          <p>\n            The <u>first</u> is simply a <Link to='/line-chart'>lineplot</Link> with dots added\n            on top of it. It takes as input 2 numeric variables only. The <u>second</u> shows the relationship\n            between 2 numeric variables across time. It requires 3 numeric variables as input.</p>\n          <p>Confusing? Visit <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>data-to-viz</a> to clarify..</p>\n          <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>\n            <Button size=\"sm\">Read more</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Connected scatterplot with <code>Seaborn</code></h2>\n        <p>\n          Building a connected scatterplot with <code>Seaborn</code> looks pretty much the same as for\n          a line chart, so feel free to visit the related section. Here are a few examples to remind the\n          basics and understand how to customize the markers.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"132_Matplotlib-connected-scatterplot\"\n            caption=\"Basic connected scatterplot with Python and Seaborn.\"\n            linkTo=\"/132-basic-connected-scatterplot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot with <code>Matplotlib</code></h2>\n        <p>\n          As for <Link to='/scatter-plot'>scatterplots</Link>, <code>Matplotlib</code> will help us build a bubble plot thanks to\n          the the <code>plt.scatter()</code> function. This function provides a <code>s</code> parameter allowing\n          to pass a third variable that will be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"106_seaborn_style_on_plt1\"\n            caption=\"Basic connected scatterplot with Python and Matplotlib\"\n            linkTo=\"/106-seaborn-style-on-matplotlib-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Connected scatterplot on a split window\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"How to customize line and markers with Matplotlib\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n        </Row>\n        <br />\n        <p>Cheatsheet: line customization with <code>Matplotlib</code> and the <code>linestyle</code> parameter.</p>\n        <div style={{ maxWidth: '350px' }}>\n          <Link to={\"/121-line-chart-customization\"}>\n            <ChartImage imgName={\"121_Custom_line_plot4\"} caption={'Cheat sheet: line customization with matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot for 2 variables</h2>\n        <p>\n          As explained above, a connected scatterplot can also be base on 3 numeric variables. It allows to\n          study the evolution of 2 variables (placed on the X and on the Y axis).\n        </p>\n        <div style={{ maxWidth: '550px' }}>\n          <Link to={\"/connected-scatterplot-for-evolution\"}>\n            <ChartImage imgName={\"connected-scatterplot-for-evolution\"} caption={'Connected scatterplot to show the evolution of 2 variables'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-text-repel-with-matplotlib\"}>\n              <ChartImage imgName={\"web-text-repel-with-matplotlib-square\"} caption={\"Learn how to use the adjustText library to add many labels with no overlaps.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","ConnectedScatter","title","isTocEnabled","seoDescription","description","id","href","size","style","maxWidth","chartFamily"],"sourceRoot":""}