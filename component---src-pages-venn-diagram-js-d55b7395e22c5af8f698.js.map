{"version":3,"file":"component---src-pages-venn-diagram-js-d55b7395e22c5af8f698.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/venn-diagram.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/venn.html'>Venn Diagram</a> (also called <code>primary diagram</code>, <code>set diagram</code> or <code>logic diagram</code>) is a diagram that shows all possible logical relationships between a finite collection of different sets. Fortunately, the <code>matplotlib_venn</code> library allows to build one easily with Python.</p>\";\n\n\nconst quickCode = `# library\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\n\n# Use the venn2 function\nvenn2(subsets = (10, 5, 2), set_labels = ('Group A', 'Group B'))\nplt.show()\n`\n\n\nexport default function Venn() {\n\n  return (\n\n    <Layout title=\"Venn Diagram\" isTocEnabled seoDescription=\"A collection of Venn Diagram examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Venn Diagram\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>venn2</code> function of the <code>matplotlib_venn</code> library is the best way to\n            make a Venn Diagram with Python, as shown on the code below.\n            </p>\n            <p> Note that several input formats are possible to get there. This\n            first post of the section goes through them and should get you started\n              from any kind of input. üî•</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/170-basic-venn-diagram-with-2-groups\"}>\n              <ChartImage imgName=\"170_Basic_Venn_Diagram\"\n                caption=\"Most basic Venn Diagram with Python\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Matplotlib-venn pkg\">&#8505; &#65039; A note on the <code>Matplotlib-venn</code> library</h2>\n          <p>The <code>matplotlib-venn</code> library has been created\n          by <a href=\"https://github.com/konstantint/matplotlib-venn\">Konstantin Tretyakov</a>. Its official documentation\n            is available on <a href=\"https://github.com/konstantint\">github</a>. Take a minute to give him a ‚≠ê if you use it!\n          </p>\n          <a href=\"https://github.com/konstantint/matplotlib-venn\">\n            <Button size=\"sm\">Matplotlib-venn documentation</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Venn Diagram with <code>Matplotlib</code> and <code>matplotlib-venn</code></h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible python library for data visualization.\n          It is appropriate to build any kind of chart, including the\n          lollipop plot thanks to its <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"171_Basic_Venn_3-groups\"\n            caption=\"Venn Diagram with 3 sets.\"\n            linkTo=\"/171-basic-venn-diagram-with-3-groups\"\n          />\n          <ChartImageContainer\n            imgName=\"172_custom_venn_diagram3\"\n            caption=\"Customize Venn Diagram: circles, lables and more.\"\n            linkTo=\"/172-custom-venn-diagram\"\n          />\n          <ChartImageContainer\n            imgName=\"174_Change_Background_color_venn\"\n            caption=\"Change Venn diagram background color.\"\n            linkTo=\"/174-change-background-colour-of-venn-diagram\"\n          />\n        </Row>\n        <p>The <code>Venn2()</code> function allows to customize the venn diagram as much as you want, allowing to build some pretty neat\n        figures as below:\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\n          <Link to='/173-elaborated-venn-diagram'>\n            <ChartImage imgName={'173_elaborated_Venn_diagram'} caption={'The matplotlib-venn library allows a high level of customization. Here is an example taking advantage of it'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"UpSet Chart\">Upset plot as an alternative</h2>\n        <p>\n          Venn diagrams are great to visualize the intersection between 2 or 3 sets.\n          Above that they become quite <a href=\"https://www.data-to-viz.com/graph/venn.html\">messy and unreadable</a>.\n        </p>\n        <p>There is a alternative to them: the upSet plot that can be made thanks to the <a href='https://pypi.org/project/UpSetPlot/'>upSetPlot</a> library</p>\n        <a href=\"https://pypi.org/project/UpSetPlot/\">\n          <Button size=\"sm\">Show me!</Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","Venn","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","Matplotlib","style","maxWidth","margin","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}