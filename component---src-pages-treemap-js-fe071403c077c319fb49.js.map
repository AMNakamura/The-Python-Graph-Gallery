{"version":3,"file":"component---src-pages-treemap-js-fe071403c077c319fb49.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/treemap.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/treemap.html'>treemap</a> displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. In <code>Python</code>, the <code>squarify</code> library allows to compute the rectangle positions and plot it.</p>\";\n\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\n\n# Create a data frame with fake data\ndf = pd.DataFrame({'nb_people':[8,3,4,2], 'group':[\"group A\", \"group B\", \"group C\", \"group D\"] })\n\n# plot it\nsquarify.plot(sizes=df['nb_people'], label=df['group'], alpha=.8 )\nplt.axis('off')\nplt.show()\n`\n\n\nexport default function Treemap() {\n\n  return (\n\n    <Layout title=\"Treemap\" isTocEnabled seoDescription=\"A collection of treemap examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Treemap\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>A <code>treemap</code> displays each element of a dataset as a rectangle. It allows to\n            see what proportion each element has compared to the whole.</p>\n            <p> This is doable with <code>python</code> and <code>Matplotlib</code> thanks to\n            the <code>squarify</code> library that can be used as follow:ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/200-basic-treemap-with-python\"}>\n              <ChartImage imgName=\"200_Basic_Treemap_with_squarify\"\n                caption=\"Most basic Treemap with Python, Matplotlib and Squarify\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Squarify\">&#8505; &#65039; A note on the <code>Squarify</code> package</h2>\n          <p>The squarify library is a pure Python implementation of the squarify\n            treemap layout algorithm. It is a project developped by <a href=\"https://github.com/laserson\">Uri Laserson</a> that\n            has its documentation on <a href=\"https://github.com/laserson/squarify\">github</a>.</p>\n          <a href=\"https://github.com/laserson/squarify\">\n            <Button size=\"sm\">Squarify documentation</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Treemap with <code>Matplotlib</code> and <code>Squarify</code></h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible python library for data visualization.\n          It is appropriate to build any kind of chart, including the\n          lollipop plot thanks to its <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"201_Custom_Treemap1\"\n            caption=\"How to control the color of your treemap\"\n            linkTo=\"/201-control-the-color-of-treemap\"\n          />\n          <ChartImageContainer\n            imgName=\"202_Treemap_map_color_to_size\"\n            caption=\"How to make the rectangle colors relative to their values.\"\n            linkTo=\"/202-treemap-with-colors-mapped-on-values\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","Treemap","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}