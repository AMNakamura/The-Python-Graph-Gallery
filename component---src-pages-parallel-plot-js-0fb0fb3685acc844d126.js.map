{"version":3,"file":"component---src-pages-parallel-plot-js-0fb0fb3685acc844d126.js","mappings":"4MAMMA,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIH,EAAQI,SAASF,GACnB,OACE,iCAGJ,IAuBMG,GAvBOC,EAAAA,EAAAA,gBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASF,MAG9B,OAAKG,EAMH,gCACE,uBAAKQ,UAAU,uBACb,gBAAC,IAAD,CACEC,IAAKX,EACLY,MAAOV,EAAMM,KAAKK,gBAAgBD,MAClCF,UAAU,kBAEZ,uBAAKA,UAAU,qBACb,uBAAKA,UAAU,yBACb,yBAAIV,OAdL,O,iGCvCI,SAASc,EAAT,GAA4D,IAA7Bf,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASe,EAAU,EAAVA,OAC9D,OACE,gBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,gBAAC,EAAAC,KAAD,CAAMC,GAAIJ,GACR,gBAAC,IAAD,CAAYhB,QAASA,EAASC,QAASA,Q,0NCsBhC,SAASoB,IAEtB,OAEE,gBAAC,IAAD,CAAQC,MAAM,2BAA2BC,cAAY,EAACC,eAAe,sHACnE,gBAAC,IAAD,CACEF,MAAM,2BACNG,YATN,kYAYI,gBAAC,IAAD,KACE,sBAAIC,GAAG,SAAP,iBACA,gBAAC,IAAD,CAAKf,UAAU,sBACb,gBAAC,IAAD,CAAKO,GAAI,GACP,yBAAG,sCAAH,qIAAwJ,sDAAxJ,iCAEF,gBAAC,IAAD,CAAKA,GAAI,GACP,gBAAC,EAAAC,KAAD,CAAMC,GAAI,kCACR,gBAAC,IAAD,CAAYpB,QAAQ,kCAClBC,QAAQ,wDAKhB,gBAAC,IAAD,KAzCO,oTA4CT,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIyB,GAAG,UAAP,kCAA+C,sCAA/C,QAAuE,uCACvE,wEAC8C,sDAD9C,gBAEK,sCAFL,mEAIA,4EAAmD,qBAAGC,KAAK,wGAAR,yBACnD,gBAAC,IAAD,KACE,gBAAC,IAAD,CACE3B,QAAQ,kCACRC,QAAQ,iCACRe,OAAO,qCAKb,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIU,GAAG,UAAS,gBAAC,KAAD,MAAhB,wCAAkE,uCAClE,yBAAG,sCAAH,2HACA,qGAA4E,sDAA5E,cACA,uBAAKf,UAAU,WACb,0BAAQiB,IAAI,0DAA0DN,MAAM,wCAAwCO,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAASC,OAAQ,YAEvK,gBAAC,EAAAb,KAAD,CAAMC,GAAG,oCACP,gBAAC,IAAD,CAAQa,KAAK,MAAb,cAMJ,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIP,GAAG,gBAAe,gBAAC,KAAD,MAAtB,gBACA,yGACQ,qBAAGC,KAAK,mCAAR,KADR,UAEM,qBAAGA,KAAK,wCAAR,wBAFN,qMAKwB,qBAAGA,KAAK,sDAAR,gBALxB,KAOA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKV,GAAI,GAAIC,GAAI,GACf,gBAAC,EAAAC,KAAD,CAAMC,GAAI,oCACR,gBAAC,IAAD,CAAYpB,QAAS,yCAA0CC,QAAS,2EAMhF,gBAAC,IAAD,MAEA,uBAAKU,UAAU,cAAce,GAAG,WAC9B,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAoBQ,YAAY,cAIpC,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,gBAAC,IAAD,OAGF,gBAAC,IAAD","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/parallel-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Animation, Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\nconst quickCode = `# libraries\nimport pandas\nimport matplotlib.pyplot as plt\nfrom pandas.tools.plotting import parallel_coordinates\n\n# Take the iris dataset\nimport seaborn as sns\ndata = sns.load_dataset('iris')\n\n# Make the plot\nparallel_coordinates(data, 'species', colormap=plt.get_cmap(\"Set2\"))\nplt.show()\n`\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/parallel.html'>parallel plot</a> plot allows to compare the feature of several individual observations (series) on a set of numeric variables. Interestingly, <code>Pandas</code> is probably the best way to plot a parallel coordinate plot with python. <code>Plotly</code> is a good alternative to plot interactive versions though.</p>\";\n\nexport default function Parallel() {\n\n  return (\n\n    <Layout title=\"Parallel coordinate plot\" isTocEnabled seoDescription=\"A collection of parallel coordinate chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Parallel coordinate plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>Pandas</code> is probably the best way to make a parallel coordinate plot. This library is most often used for data wrangling, but it offers a <code>parallel_coordinates()</code> function dedicated to it.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/150-parallel-plot-with-pandas\"}>\n              <ChartImage imgName=\"150_Parrallele_plot_with_pandas\"\n                caption=\"Most basic parallel plot with Python and Pandas.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">Parallel coordinate chart with <code>Python</code> and <code>Pandas</code></h2>\n        <p>\n          The following examples are dedicated to the <code>parallel_coordinates()</code> function\n          of <code>Pandas</code>. It shows how to apply the most common types of customization.\n        </p>\n        <p>If you need to go further, here is the complete <a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.parallel_coordinates.html'>pandas documentation</a></p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"150_Parrallele_plot_with_pandas\"\n            caption=\"Basic parallel coordinate char\"\n            linkTo=\"/150-parallel-plot-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\"><Animation />Interactive parallel coordinate with <code>plotly</code></h2>\n        <p><code>Plotly</code> is a python library that makes the link with Javascript to build interactive charts that you can display in a browser.</p>\n        <p>The following example is a parallel chart made with this library and the <code>parallel_coordinates()</code> function.</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/parallel-coordinate-plot-plotly.html\" title=\"parallel coordinate chart with plotly\" style={{ border: \"none\", width: '800px', height: '500px' }}></iframe>\n        </div>\n        <Link to=\"/parallel-coordinate-plot-plotly\">\n          <Button size=\"sm\">\n            See code\n          </Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-radar-chart-with-matplotlib\"}>\n              <ChartImage imgName={\"web-radar-chart-with-matplotlib-square\"} caption={\"A radar chart can be an alternative to a parallel coordinate plot.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","Parallel","title","isTocEnabled","seoDescription","description","id","href","src","style","border","width","height","size","chartFamily"],"sourceRoot":""}