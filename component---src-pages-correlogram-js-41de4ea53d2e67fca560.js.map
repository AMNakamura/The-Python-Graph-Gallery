{"version":3,"file":"component---src-pages-correlogram-js-41de4ea53d2e67fca560.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/correlogram.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto|Montserrat\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlogram</a> or <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlation matrix</a> allows to analyse the relationship between each pair of numeric variables of a matrix. The correlation is visualised as a <a href='https://www.python-graph-gallery.com/scatter-plot'>scatterplot</a>. The diagonal represents the distribution of each variable with a <a href='https://www.python-graph-gallery.com/histogram'>histogram</a> or a <a href='https://www.python-graph-gallery.com/density-plot'>density plot</a>.</p > \";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\nimport matplotlib.pyplot as plt\n\n# Basic correlogram\nsns.pairplot(df)\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Correlogram\"\n    seoDescription=\"A collection of correlogram examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Correlogram() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Correlogram\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Once more, the <code>Seaborn</code> library is here to build a\n              high quality correlogram with a few lines of code only.🔥\n            </p>\n            <p>\n              Note that all the stuff you learned in the{' '}\n              <Link to=\"/scatter-plot\">scatterplot</Link>\n              and <Link to=\"/histogram\">histogram</Link> sections can be used\n              here.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/110-basic-correlation-matrix-with-seaborn'}>\n              <ChartImage\n                imgName=\"110_Basic_Correlogram\"\n                caption=\"Basic correlogram with Python and Seaborn.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Correlogram with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is definitely the best way to build a correlogram\n          with <code>python</code>. It provides a <code>pairplot()</code>{' '}\n          function that handles most of the work for you. The examples below\n          give an overview of the customizations you can apply to it to suits\n          your need.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom1\"\n            caption=\"Correlogram with linear trend displayed on each scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Apply colors to each group and customized the scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom7\"\n            caption=\"Customize the distributions displayed on the diagonal\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Correlogram with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As usual it is totally possible to build the chart with Matplotlib,\n          but requires to write a bit more code. Basically, it is done using the\n          subplots() function to create the grid, and next building a loop to\n          add the charts one by one.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"how-to-remove-axis-in-matplotlib\"\n            caption=\"How to remove some unused entries in a chart grid.\"\n            linkTo=\"/how-to-remove-axis-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Related\">\n            &#128161; Scatterplot and Histogram sections are related\n          </h2>\n          <p>\n            Note that a correlogram is an aggregate of{' '}\n            <Link to=\"/scatter-plot\">scatterplots</Link> and{' '}\n            <Link to=\"/histogram\">histograms</Link>. Most of the customizations\n            described in those related sections can be applied here.\n          </p>\n          <Link to=\"/scatter-plot\">\n            <Button size=\"sm\">Scatterplot section</Button>\n          </Link>\n          <Link to=\"/histogram\">\n            <Button size=\"sm\">Histogram section</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","href","rel","content","property","chartDescription","quickCode","Head","Correlogram","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","Seaborn","Matplotlib","Button","size","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}