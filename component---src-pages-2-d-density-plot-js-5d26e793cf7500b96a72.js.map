{"version":3,"file":"component---src-pages-2-d-density-plot-js-5d26e793cf7500b96a72.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartFamilySection.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SectionLogoWithOverlay.js","webpack://the-python-graph-gallery/./src/components/TitleAndDescription.js","webpack://the-python-graph-gallery/./src/pages/2d-density-plot.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Col.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n        <div className=\"sectionLogoContainer\">\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n        </div>\n      )}\n    </>\n  );\n}\n","import \"./titleAndDescription.css\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SocialMediaButtons from \"./SocialMediaButtons\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"gatsby\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n// import Sponsors from \"../components/Sponsors\";\n\n// Note that the description received is a string that contains html.\n// It was not possible to pass JSX since it is sometimes passed directly from\n// the python notebooks metadata\nexport default function TitleAndDescription({ title, description, chartType }) {\n  const chartInfo = chartTypesInfo.filter((chart) => chart.id === chartType)[0];\n\n  return (\n    <>\n      <div className=\"titleAndDescription\">\n        <h1 className=\"mainTitle\">{title}</h1>\n        <hr className=\"smallHr\" />\n        <SocialMediaButtons />\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n        {chartType && (\n          <div style={{ marginTop: \"10px\" }}>\n            <Link to={fullUrlToInternalLink(chartInfo.pythonURL)}>\n              <Button size=\"sm\">{chartInfo.label + \" section\"}</Button>\n            </Link>\n            <a href={chartInfo.dataToVizURL}>\n              <Button size=\"sm\">About this chart</Button>\n            </a>\n          </div>\n        )}\n      </div>\n      {/* <Sponsors /> */}\n    </>\n  );\n}\n\nTitleAndDescription.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  chartType: PropTypes.string\n};\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\";\nimport { Button } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>This section explains how to build a <a href='https://www.data-to-viz.com/graph/density2d.html'>2d density chart</a> or a <a href='https://www.data-to-viz.com/graph/density2d.html'>2d histogram</a> with python. Those chart types allow to visualize the combined distribution of two quantitative variables. They can be build with <code>Matplotlib</code> or <code>Seaborn</code>.</p>\";\n\nexport default function Heatmap() {\n  return (\n    <Layout\n      title=\"2d density chart\"\n      isTocEnabled\n      seoDescription=\"A collection of 2d density chart examples made with Python, coming with explanation and reproducible code\"\n    >\n      <TitleAndDescription\n        title=\"2D Density Chart\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">💡 What is a 2D density chart?</h2>\n          <p>\n            There are several chart types allowing to visualize the distribution\n            of a combination of 2 numeric variables. They always have a variable\n            represented on the X axis, the other on the Y axis, like for a{\" \"}\n            <Link to=\"/scatter-plot\">scatterplot</Link> (left).\n          </p>\n          <p>\n            Then the number of observations within a particular area of the 2D\n            space is counted and represented with a color gradient. The shape\n            can vary: hexagones result in a <code>hexbin chart</code>, squares\n            in a <code>2d histogram</code>. A kernel density estimate can be\n            used to get a <code>2d density plots</code> or a{\" \"}\n            <code>contour plots</code>\n          </p>\n          <div style={{ maxWidth: \"750px\", margin: \"auto\" }}>\n            <Link to={\"/86-avoid-overlapping-in-scatterplot-with-2d-density\"}>\n              <ChartImage\n                imgName=\"86_2D_density_plot_explanation\"\n                caption={\"Cheat sheet: line customization with matplotlib\"}\n              />\n            </Link>\n          </div>\n          <p>\n            Confusing? Visit{\" \"}\n            <a href=\"https://www.data-to-viz.com/graph/density2d.html\">\n              data-to-viz\n            </a>{\" \"}\n            to clarify..\n          </p>\n          <a href=\"https://www.data-to-viz.com/graph/density2d.html\">\n            <Button size=\"sm\">More viz explanation</Button>\n          </a>\n          <Link to=\"/86-avoid-overlapping-in-scatterplot-with-2d-density\">\n            <Button size=\"sm\">Show me the code</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Contour\">\n          <Seaborn />\n          Contour plot with <code>Seaborn</code>\n        </h2>\n        <p>\n          The contour plot can be easily built thanks to the{\" \"}\n          <code>kdeplot()</code> function of the Seaborn library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot1\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot2\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot3\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"2d histogram\">\n          <Seaborn />\n          2D histogram with <code>Seaborn</code>\n        </h2>\n        <p>\n          Build a 2d histogram thanks to the <code>hist2d()</code> function of\n          the <code>Seaborn</code> library. Do not forget to play with the{\" \"}\n          <code>bins</code> argument to find the value representing the best\n          your data.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_3\"\n            caption=\"Basic 2D histogram with seaborn\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_5\"\n            caption=\"Control the color in the 2d histogram.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"83_2D_Histogram_matplotlib_6\"\n            caption=\"Black and white, color scale legend.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Hexbin\">\n          <Matplotlib />\n          Hexbin chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          Split the graph area in hexagones and you get a hexbin density chart.\n          This time, it is <code>matplotlib</code> that gets you covered thanks\n          to its <code>hexbin()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"84_hexbin_matplotlib_1\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"84_hexbin_matplotlib_3\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/83-basic-2d-histograms-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"2d density\">\n          <Matplotlib />\n          2d density chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          2D densities are computed thanks to the <code>gaussian_kde()</code>{\" \"}\n          function and plotted thanks with the <code>pcolormesh()</code>{\" \"}\n          function of <code>matplotlib()</code>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"85_2D_density_plot_matplotlib_1\"\n            caption=\"Basic 2d density chart.\"\n            linkTo=\"/85-density-plot-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"85_2D_density_plot_matplotlib_2\"\n            caption=\"How to customize the 2d density chart.\"\n            linkTo=\"/85-density-plot-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Marginal plot\">\n          <Matplotlib />\n          2d density and marginal plots\n        </h2>\n        <p>\n          2D densities often combined with marginal distributions. It helps to\n          highlight the distribution of both variables individually. It is\n          pretty straightforward to add thanks to the <code>jointplot()</code>{\" \"}\n          function of the <code>Seaborn</code> library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot2\"\n            caption=\"Marginal distribution and hexbin.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot3\"\n            caption=\"Marginal distribution and contour.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot5\"\n            caption=\"General customization.\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["TITLES","distribution","correlation","ranking","partOfAWhole","evolution","map","flow","general","ChartFamilySection","_ref","chartFamily","allLogos","chartTypesInfo","filter","chart","family","id","link","fullUrlToInternalLink","pythonURL","React","Col","key","xs","md","SectionLogoWithOverlay","chartType","logo","caption","label","className","Row","allGifs","ChartImage","imgName","includes","image","useStaticQuery","allFile","edges","find","n","node","name","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Link","to","generalList","info","isGeneralFamily","SectionLogo","TitleAndDescription","title","description","chartInfo","SocialMediaButtons","dangerouslySetInnerHTML","__html","style","marginTop","Button","size","href","dataToVizURL","chartDescription","Heatmap","Layout","isTocEnabled","seoDescription","Container","maxWidth","margin","Spacing","Seaborn","Matplotlib","Contact","props","ref","colProps","as","Component","bsPrefix","spans","breakpoints","minBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","push","useCol","length","displayName","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}