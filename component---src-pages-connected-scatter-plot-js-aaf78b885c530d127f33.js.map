{"version":3,"file":"component---src-pages-connected-scatter-plot-js-aaf78b885c530d127f33.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/connected-scatter-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>connected scatterplot</a> is a <a href='https://python-graph-gallery.com/line-chart/'>line chart</a> where each data point is shown by a circle or any type of marker. This section explains how to build a connected scatterplot with <code>Python</code>, using both the <code>Matplotlib</code> and the <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# libraries\n  import matplotlib.pyplot as plt\n  import numpy as np\n  import pandas as pd\n\n  # data\n  df = pd.DataFrame({\n      'x_axis': range(1,10),\n      'y_axis': np.random.randn(9)*80+range(1,10)\n  })\n\n  # plot\n  plt.plot('x_axis', 'y_axis', data=df, linestyle='-', marker='o')\n  plt.show()\n`\n\nexport default function ConnectedScatter() {\n\n  return (\n\n    <Layout title=\"Connected Scatterplot\" isTocEnabled seoDescription=\"A collection of connected scatterplot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Connected Scatterplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Building a connected scatterplot with Python and Matplotlib is a breeze thanks to\n              the <code>plot()</code> function. The 2 first argumenst are the X and Y values respectively, which\n              can be stored in a <code>pandas</code> data frame.</p>\n            <p>The <code>linestyle</code> and <code>marker</code> arguments allow to use line and circles to make it look like\n              a connected scatterplot. It means everything is very close to a <Link to=\"/line-chart\">line chart</Link> or a <Link to=\"/scatter-plot\">scatterplot</Link> that\n              are extensively described in the gallery.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/132-basic-connected-scatterplot\"}>\n              <ChartImage imgName=\"132_Matplotlib-connected-scatterplot\"\n                caption=\"Basic connected scatterplot with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Two types of connected scatterplot</h2>\n          <p>There are two types of connected scatterplot, and it often creates confusion.</p>\n          <p>\n            The <u>first</u> is simply a <Link to='/line-chart'>lineplot</Link> with dots added\n            on top of it. It takes as input 2 numeric variables only. The <u>second</u> shows the relationship\n            between 2 numeric variables across time. It requires 3 numeric variables as input.</p>\n          <p>Confusing? Visit <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>data-to-viz</a> to clarify..</p>\n          <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>\n            <Button size=\"sm\">Read more</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Connected scatterplot with <code>Seaborn</code></h2>\n        <p>\n          Building a connected scatterplot with <code>Seaborn</code> looks pretty much the same as for\n          a line chart, so feel free to visit the related section. Here are a few examples to remind the\n          basics and understand how to customize the markers.\n        </p>\n        <p><i>Coming soon</i></p>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot with <code>Matplotlib</code></h2>\n        <p>\n          As for <Link to='/scatter-plot'>scatterplots</Link>, <code>Matplotlib</code> will help us build a bubble plot thanks to\n          the the <code>plt.scatter()</code> function. This function provides a <code>s</code> parameter allowing\n          to pass a third variable that will be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"106_seaborn_style_on_plt1\"\n            caption=\"Basic connected scatterplot with Python and Matplotlib\"\n            linkTo=\"/106-seaborn-style-on-matplotlib-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Connected scatterplot on a split window\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"How to customize line and markers with Matplotlib\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"132-basic-connected-scatterplot\"\n            caption=\"Some more connected scatterplot examples with matplotlib\"\n            linkTo=\"/132-basic-connected-scatterplot\"\n          />\n        </Row>\n        <br />\n        <p>Cheatsheet: line customization with <code>Matplotlib</code> and the <code>linestyle</code> parameter.</p>\n        <div style={{ maxWidth: '350px' }}>\n          <Link to={\"/121-line-chart-customization\"}>\n            <ChartImage imgName={\"121_Custom_line_plot4\"} caption={'Cheat sheet: line customization with matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot for 2 variables</h2>\n        <p>\n          As explained above, a connected scatterplot can also be base on 3 numeric variables. It allows to\n          study the evolution of 2 variables (placed on the X and on the Y axis).\n        </p>\n        <div style={{ maxWidth: '550px' }}>\n          <Link to={\"/connected-scatterplot-for-evolution\"}>\n            <ChartImage imgName={\"connected-scatterplot-for-evolution\"} caption={'Connected scatterplot to show the evolution of 2 variables'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-text-repel-with-matplotlib\"}>\n              <ChartImage imgName={\"web-text-repel-with-matplotlib-square\"} caption={\"Learn how to use the adjustText library to add many labels with no overlaps.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-highlighted-lineplot-with-faceting\"}>\n              <ChartImage imgName={\"web-highlighted-lineplot-with-faceting\"} caption={\"A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","ConnectedScatter","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","Seaborn","Matplotlib","style","maxWidth","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}