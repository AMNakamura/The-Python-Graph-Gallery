{"version":3,"file":"component---src-pages-timeseries-js-a12c78db0c3a9fc86b5c.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/timeseries.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>Timeseries charts refer to all charts representing the evolution of a numeric value. <a href='https://www.python-graph-gallery.com/line-chart/'>Line chart</a>, <a href='https://www.python-graph-gallery.com/streamchart/'>streamgraph</a>, <a href='https://www.python-graph-gallery.com/barplot/'>barplot</a>, <a href='https://www.python-graph-gallery.com/area-plot/'>area chart</a>: they all can be used for timeseries visualization. This section displays many timeseries examples made with Python, Matplotlib and other libraries.</p>\";\n\n\n  const quickCode = `# libraries\n  import matplotlib.pyplot as plt\n  import numpy as np\n\n  # create data\n  values=np.cumsum(np.random.randn(1000,1))\n\n  # use the plot function\n  plt.plot(values)\n  `\n\nexport default function Pie() {\n\n  return (\n\n    <Layout title=\"Timeseries\" isTocEnabled seoDescription=\"A collection of timeseries examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Timeseries\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Making a simple line chart with <code>matplotlib</code> is pretty straightforward thanks to the <code>plot()</code> function.</p>\n            <p>If you provide only a series of values, it will consider that these values are ordered and will use values from 1 to n to create the X axis.ðŸ”¥</p>\n            <p>For more control on the chart, see the dedicated section below.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/120-line-chart-with-matplotlib\"}>\n              <ChartImage imgName=\"120_Basic_lineplot2\"\n                caption=\"The most basic histogram one can make with python and seaborn\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Area\">Area charts for timeseries</h2>\n        <p>\n          <Link to='/area-plot'>Area charts</Link> are very often used for timeseries visualization. They are\n          particularly adapted when there is only 1 series to display. When several\n          groups must be displayed, they can still be used using faceting.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"242_area_chart_and_faceting\"\n            caption=\"Area chart for timeseries with facting to display many groups\"\n            linkTo=\"/242-area-chart-and-faceting\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Line\">Line charts for timeseries</h2>\n        <p>\n          <Link to='/line-chart'>Line charts</Link> are probably the most common type of viz for timeseries. They are\n          particularly adapted when several groups must be displayed to compare their evolution. But mind\n          the <a href='data to viz spaghetti'>spaghetti plot</a>: too many groups make the figure unreadable.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Timeseries\">Heatmap for timeseries</h2>\n        <p>\n          A heatmap can be used to display some temporal data. Here is an example using <Link to=\"/matplotlib\">matplotlib</Link> where\n          the evolution of a temperature is displayed over the hour of the day (Y axis) and the day of the year (X axis) organized by month.\n        </p>\n        <div style={{ maxWidth: \"800px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/heatmap-for-timeseries-matplotlib'>\n            <ChartImage imgName={'heatmap-for-timeseries-matplotlib'} caption={'A heatmap for temporal data with Python and Matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>\n          A set of publication ready charts for timeseries. They are made with python\n          and <a href='A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.'>matplotlib</a> and\n          use a high level of customization.</p>\n        <p>\n          The <Link to='/web-line-chart-with-labels-at-line-end'>first example</Link> is a line chart showing how to add labels at the end of each series\n          for better readability. The <Link to='/web-lollipop-plot-with-python-the-office'>second</Link> shows how to use lollipop to display the evolution of a deviation around a trend.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"web-line-chart-with-labels-at-line-end\"\n            caption=\"How to add labels at the end of each line with matplotlib. Definitely better than using a legend!\"\n            linkTo=\"/web-line-chart-with-labels-at-line-end\"\n          />\n          <ChartImageContainer\n            imgName=\"web-lollipop-plot-with-python-the-office-square\"\n            caption=\"A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.\"\n            linkTo=\"/web-lollipop-plot-with-python-the-office\"\n          />\n          <ChartImageContainer\n            imgName=\"web-highlighted-lineplot-with-faceting-square\"\n            caption=\"A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.\"\n            linkTo=\"/web-highlighted-lineplot-with-faceting\"\n          />\n          <ChartImageContainer\n            imgName=\"web-lineplots-and-area-chart-the-economist-square1\"\n            caption=\"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"\n            linkTo=\"/web-lineplots-and-area-chart-the-economist\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","Pie","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","style","maxWidth","margin","padding","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}