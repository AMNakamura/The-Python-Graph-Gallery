{"version":3,"file":"component---src-pages-stacked-area-plot-js-421ef4912bca45d0ccef.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/stacked-area-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Pandas } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/stackedarea.html'>stacked area chart</a> displays the evolution of a numeric variable for several groups of a dataset. Each group is displayed on top of each other, making it easy to read the evolution of the total, but hard to read each group value accurately. In python, stacked area charts are mainly done thanks to the <code>stackplot()</code> function</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny1=[1,4,6,8,9]\ny2=[2,2,7,10,12]\ny3=[2,8,5,10,6]\n\n# Basic stacked area chart.\nplt.stackplot(x,y1, y2, y3, labels=['A','B','C'])\nplt.legend(loc='upper left')\n`\n\nexport default function StackedAreaPlot() {\n\n  return (\n\n    <Layout title=\"Stacked area chart\" isTocEnabled seoDescription=\"A collection of stacked area chart examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Stacked area Chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Here is a quick start code snippet to demo how the <code>stackplot()</code> function of <code>matplotlib</code> works.</p>\n            <p>Note that here each groups are provided in its own vector of values. The <Link to='/250-basic-stacked-area-chart'>basic stacked area</Link> blog post\n            explains how to use the function from any type of data format.\n            </p>\n\n          </Col>\n          <Col md={6}>\n            <Link to={\"/250-basic-stacked-area-chart\"}>\n              <ChartImage imgName=\"250_basic_stacked_area_chart\"\n                caption=\"The most basic stacked area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; The issue with stacking</h2>\n          <p>\n            Stacked area charts must be used with care since they suffer a number of caveats. They are\n            appropriate to study the evolution of the whole and the relative proportions of each group, but\n            not to study the evolution of each individual group.\n          </p>\n          <p>\n            For instance, it is pretty hard to understand how the green group evolves on the chart below.\n            Can you spot if its value is increasing, decreasing or stable?\n          </p>\n          <a href='https://www.data-to-viz.com/caveat/stacking.html'>\n            <Button size=\"sm\">Read more</Button>\n          </a>\n          <div style={{ maxWidth: \"400px\", margin: \"0 auto\", padding: 30 }}>\n            <a href='https://www.data-to-viz.com/caveat/stacking.html' >\n              <ChartImage imgName={'issue-with-stacking'} caption={'It is hard to see how the green group evolves.'} />\n            </a>\n          </div>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Stacked Area chart with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is the most common way to build a stacked area chart with Python. The examples\n          below start by explaining to basics of the <code>stackplot()</code> function. The also describe the most common\n          type of customization like changing colors, controling group order and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"250_basic_stacked_area_chart\"\n            caption=\"Most basic stacked area chart\"\n            linkTo=\"/250-basic-stacked-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"251_seaborn_style_on_stacked_area_chart\"\n            caption=\"Apply seaborn style on the matplotlib stacked area chart\"\n            linkTo=\"/251-stacked-area-chart-with-seaborn-style\"\n          />\n          <ChartImageContainer\n            imgName=\"253_color_and_stacked_area_chart2\"\n            caption=\"Control area colors\"\n            linkTo=\"/253-control-the-color-in-stacked-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"242_area_chart_and_faceting\"\n            caption=\"Area chart and small multiple\"\n            linkTo=\"/242-area-chart-and-faceting\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"tip\">\n        <Container>\n          <h2 id=\"Workaround\">&#128161; The <code>baseline</code> parameter</h2>\n          <p>\n            It is important to note that the <code>stackplot()</code> function of <code>matplotlib</code> has a\n            <code>baseline</code> parameter. This parameter controls how groups are displayed around\n            the x axis, what allows to mimic a <Link to=\"/streamchart\">streamgraph</Link>.\n          </p>\n          <Link to='/252-baseline-options-for-stacked-area-chart'>\n            <Button size=\"sm\">Read more</Button>\n          </Link>\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n            <Link to='/252-baseline-options-for-stacked-area-chart'>\n              <ChartImage imgName={'252_baseline_and_stacked_area_chart'} caption={'It is hard to see how the green group evolves.'} />\n            </Link>\n          </div>\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Percent stacked\"><Matplotlib />Percent Stacked Area chart with <code>Matplotlib</code></h2>\n        <p>\n          A variation of the stacked area graph is the percent stacked area graph where the value of\n          every groups are normalized at each time stamp. It allows to study the percentage of each\n          group in the whole more efficiently.\n        </p>\n        <p>\n          Fortunately, the <code>pandas</code> library has a <code>divide()</code> function that\n          allows to apply this normalization easily.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"255_percent_stacked_area_chart\"\n            caption=\"Basic percent stacked area chart\"\n            linkTo=\"/255-percentage-stacked-area-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\"><Pandas />Stacked Area chart with <code>Pandas</code></h2>\n        <p>\n          <code>Pandas</code> is mainly useful to normalize your dataset and build a stacked\n          area chart. Surprisingly, it also provides a <code>plot.area()</code>\n          that can be handy to build a stacked area chart.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/254-pandas-stacked-area-chart'>\n            <ChartImage imgName={'254_pandas_stacked_area_chart2'} caption={'Stacked area chart with Pandas'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-lineplots-and-area-chart-the-economist\"}>\n              <ChartImage imgName={\"web-lineplots-and-area-chart-the-economist-square2\"} caption={\"Learn how to mimick The Economist's style with a figure combining both a line and an area chart\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-line-chart-with-labels-at-line-end\"}>\n              <ChartImage imgName={\"web-line-chart-with-labels-at-line-end\"} caption={\"Not a stacked area but a line chart. But shows how to add labels at the end of each group with matplotlib. Definitely better than using a legend!\"} />\n            </Link>\n          </Col>\n\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","StackedAreaPlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","style","maxWidth","margin","padding","Matplotlib","Pandas","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}