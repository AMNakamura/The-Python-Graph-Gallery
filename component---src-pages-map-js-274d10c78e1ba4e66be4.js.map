{"version":3,"file":"component---src-pages-map-js-274d10c78e1ba4e66be4.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/map.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>The first step of any geo-spatial data analysis is to draw the background map of the area of interest. This section explains what are the main ways to build it with <code>Python</code>. It is the foundation of the next sections that will add some data on top of it.</p>\";\n\nexport default function BackgroundMap() {\n\n  return (\n\n    <Layout title=\"Background Map\" isTocEnabled seoDescription=\"A collection of map examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Background Map\"\n        description={chartDescription}\n      />\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Overview\">üîé  Input format and package overview ‚≠ê </h2>\n          <p>\n            A map is basically a set of polygons displayed on a 2 dimensional canvas. There\n            are two problems you need to solve when building one:\n        </p>\n          <ul>\n            <li>\n              <u>Where to find polygon coordinates</u>. It can come from:\n              <ul>\n                <li>a <b>shape file</b> or a <b>geoJson file</b>. That's 2 different ways to store the information. The <code>geopandas</code> package is the best way to read those file formats with Python.</li>\n                <li>a <b>python library</b> like <code>geopandas</code> or <code>basemap</code> providing the information for common location like the US.</li>\n                <li><b>google map</b> or <b>open street map</b>.</li>\n              </ul>\n            </li>\n\n            <br />\n\n            <li>\n              <u>How to plot those polygons?</u>\n              <ul>\n                <li>Once you get a <code>geodataframe</code> thanks to the <code>geopandas</code> package, <code>geoplot</code> is your best choice to build a static map</li>\n                <li>If you need an interactive map from a <code>geodataframe</code>, <code>plotly</code> is a good option.</li>\n                <li>If you want to use google map style maps, <code>folium</code> is the way to go.</li>\n              </ul>\n            </li>\n          </ul>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Geopandas & Geoplot\"><code>Geopandas</code> and <code>GeoPlot</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"map-read-geojson-with-python-geopandas\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/map-read-geojson-with-python-geopandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\"><code>Folium</code> for google maps style maps</h2>\n        <p>\n          <code>Folium</code> is a wrapper of the <code>leaflet.js</code> javascript library. It allows to\n          make all the data wrangling with python, and benefit the power of <code>javascript</code> for interactive\n          data visualization.\n        </p>\n        <p>The map below has been created with folium... with 1 line of code only! üòç</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/288_basic_folium_map.html\" title=\"Basic map with folium\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/288-map-background-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p><code>Folium</code> allows different types of background tiles. Here is an example with a tile called <code>Stamen Toner</code>:</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/288_basic_folium_map_toner.html\" title=\"Folium and customized tile\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/288-map-background-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>It is also possible to add markers with associated popups on top of the map:</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map1\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map2\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Basemap\">Background map with <code>Basemap</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap1\"\n            caption=\"Most basic map with python and the basemap library.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap2\"\n            caption=\"Select a specific location on the map.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap3\"\n            caption=\"Customize color and features of shapes.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap4\"\n            caption=\"List of available boundaries.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap5\"\n            caption=\"Change projection.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap6\"\n            caption=\"Use a background tile.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","BackgroundMap","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Spacing","id","Container","Row","src","style","border","width","height","Button","size","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}