{"version":3,"file":"component---src-pages-wordcloud-js-4cc70373007201e35e90.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/wordcloud.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport SectionLogoWithOverlay from \"../components/SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\"\nimport { fullUrlToInternalLink } from \"../util/utils\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\nconst logoToKeep = ['lollipop', 'barplot', 'treemap', 'circularPacking']\nconst WordAlternativeLogos = () => {\n  const allLogos = chartTypesInfo\n    .filter((chart) => logoToKeep.includes(chart.id))\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n\nconst quickCode = `# Libraries\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Create a list of word\ntext=(\"Python Python Python Matplotlib\")\n\n# Create the wordcloud object\nwordcloud = WordCloud(width=480, height=480, margin=0).generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()\n`\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/wordcloud.html'>word cloud</a> (also called <a href='https://www.data-to-viz.com/graph/wordcloud.html'>tag cloud</a> or <a href='https://www.data-to-viz.com/graph/wordcloud.html'>weighted list</a>) is a visual representation of text data. Words are usually single words, and the importance of each is shown with font size or color. <code>Python</code> fortunately has a <code>wordcloud</code> library allowing to build them.</p>\";\n\nexport default function Wordcloud() {\n\n  return (\n\n    <Layout title=\"Wordcloud\" isTocEnabled seoDescription=\"A collection of wordcloud examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Wordcloud\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>wordcloud</code> library is here to help you build a wordcloud in minutes. Here is a basic code snippets using the <code>WordCloud()</code> function to get you started.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/260-basic-wordcloud\"}>\n              <ChartImage imgName=\"260_Basic_Wordcloud\"\n                caption=\"Most basic wordcloud with python and the wordcloud library.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; The issue with wordclouds</h2>\n          <p>Wordclouds are aesthetically pleasing and people are used to it, what make sure\n          readers will understand them quick.\n          </p>\n          <p>However, it is important to consider the caveats associated to them. For instance,\n          <u>longer words</u> will t<u>ake more space</u> on the figure by construction which distorts\n          reality. Moreover, it is impossible to <u>translate a font size</u> to an accurate value.\n          </p>\n          <WordAlternativeLogos />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Wordcloud\">Wordclouds with.. the <code>wordcloud</code> library &#128512;</h2>\n        <p>\n          The <code>wordcloud</code> library takes as input a <code>string</code> containing all the words you want to display. It passes it to the <code>Wordcloud()</code> function that will compute the display an show it on the screen thanks to the <code>imshow()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud1\"\n            caption=\"Wordcloud customization: word size.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud4\"\n            caption=\"Wordcloud customization: background color.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud5\"\n            caption=\"Wordcloud customization: word color.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Custom shapes\">Wordclouds and custom shapes</h2>\n        <p>\n          It is a common need to apply a specific shape to the wordcloud.\n          TODO. Make a bette image.\n          TODO: more proiminent link toward https://github.com/amueller/word_cloud\n        </p>\n        <div style={{ maxWidth: '750px', margin: \"auto\" }}>\n          <Link to={\"/262-worcloud-with-specific-shape\"}>\n            <ChartImage imgName=\"262_Wordcloud_with_a_Mask\"\n              caption=\"Use a mask to get a wordcloud with specific shape.\"\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","logoToKeep","WordAlternativeLogos","allLogos","chartTypesInfo","filter","chart","id","map","link","fullUrlToInternalLink","pythonURL","key","SectionLogoWithOverlay","chartType","logo","label","Row","quickCode","chartDescription","Wordcloud","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","CodeChunk","Spacing","style","maxWidth","margin","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}