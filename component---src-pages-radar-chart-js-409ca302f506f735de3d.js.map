{"version":3,"file":"component---src-pages-radar-chart-js-409ca302f506f735de3d.js","mappings":"yOAQA,MAAMA,EAAS,CACbC,aAAc,eACdC,YAAa,cACbC,QAAS,UACTC,aAAc,kBACdC,UAAW,YACXC,IAAK,MACLC,KAAM,OACNC,QAAS,qBAGI,SAASC,EAAkBC,GAAmB,IAAlB,YAAEC,GAAaD,EACxD,MAAME,EAAWC,EAAAA,EACdC,QAAQC,GAAUA,EAAMC,SAAWL,IACnCL,KAAI,CAACS,EAAOE,KACX,MAAMC,GAAOC,EAAAA,EAAAA,GAAsBJ,EAAMK,WACzC,OACEC,EAAAA,cAACC,EAAAA,EAAG,CAACC,IAAKN,EAAIO,GAAI,EAAGC,GAAI,GACvBJ,EAAAA,cAACK,EAAAA,EAAsB,CACrBR,KAAMA,EACNS,UAAWZ,EAAMa,KACjBC,QAASd,EAAMe,QAEb,IAIZ,OACET,EAAAA,cAAA,WACEA,EAAAA,cAAA,MAAIJ,GAAG,iBAAiBc,UAAW,gBAAkBpB,GAAcX,aAAM,EAANA,EAASW,IAC5EU,EAAAA,cAACW,EAAAA,EAAG,KAAEpB,GAGZ,C,yFCnCA,MAAMqB,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAUxB,GAAwB,IAAvB,QAAEyB,EAAO,QAAEN,GAASnB,EAErD,GAAIuB,EAAQG,SAASD,GACnB,OACEd,EAAAA,cAAA,SAAG,QAGP,MAcMgB,GAdOC,EAAAA,EAAAA,gBAAe,cAcTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKC,KAAKR,SAASD,KAG9B,OAAKE,EAKEhB,EAAAA,cAAAA,EAAAA,SAAA,KACLA,EAAAA,cAAA,OAAKU,UAAU,uBACbV,EAAAA,cAACwB,EAAAA,EAAW,CACVR,MAAOA,EAAMM,KAAKG,gBAAgBC,gBAClCC,IAAKnB,EACLE,UAAU,kBACZV,EAAAA,cAAA,OAAKU,UAAU,qBACbV,EAAAA,cAAA,OAAKU,UAAU,yBACbV,EAAAA,cAAA,SAAIQ,OAZH,IAiBX,C,mGC/Ce,SAASoB,EAAmBvC,GAAgC,IAA/B,QAAEyB,EAAO,QAAEN,EAAO,OAAEqB,GAAQxC,EACtE,OACEW,EAAAA,cAACC,EAAAA,EAAG,CAACE,GAAI,GAAIC,GAAI,GACfJ,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAIF,GACR7B,EAAAA,cAACa,EAAAA,EAAU,CAACC,QAASA,EAASN,QAASA,KAI/C,C,wFCRA,MAAMwB,E,QAAcxC,EACjBC,QAAOwC,GAAwB,YAAhBA,EAAKtC,SACpBV,KAAIgD,GAAQA,EAAK1B,OAEL,SAASF,EAAsBhB,GAAgC,IAA/B,UAAEiB,EAAS,QAAEE,EAAO,KAAEX,GAAMR,EAGzE,MAAM6C,EAAkBF,EAAYjB,SAAST,GAE7C,OACEN,EAAAA,cAAAA,EAAAA,SAAA,KACKkC,EAWDlC,EAAAA,cAAA,OAAKU,UAAU,wBACXV,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAIlC,GACRG,EAAAA,cAACmC,EAAAA,EAAW,CAAC7B,UAAWA,KAE1BN,EAAAA,cAAA,KAAGU,UAAU,0CAA0CF,IAfvCR,EAAAA,cAAAA,EAAAA,SAAA,KACpBA,EAAAA,cAAA,OAAKU,UAAU,wBACbV,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAIlC,GACRG,EAAAA,cAACmC,EAAAA,EAAW,CAAC7B,UAAWA,IACxBN,EAAAA,cAAA,OAAKU,UAAU,sBACbV,EAAAA,cAAA,OAAKU,UAAU,0BAAyB,QAI9CV,EAAAA,cAAA,KAAGU,UAAU,0CAA0CF,IAW/D,C,sHCvBe,SAAS4B,EAAmB/C,GAAqC,IAApC,MAAEgD,EAAK,YAAEC,EAAW,UAAEhC,GAAWjB,EAC3E,MAAMkD,EAAY/C,EAAAA,EAAeC,QAAQC,GAAUA,EAAME,KAAOU,IAAW,GAE3E,OACEN,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKU,UAAU,uBACbV,EAAAA,cAAA,MAAIU,UAAU,aAAa2B,GAC3BrC,EAAAA,cAAA,MAAIU,UAAU,YACdV,EAAAA,cAACwC,EAAAA,EAAkB,MACnBxC,EAAAA,cAAA,OACEU,UAAU,cACV+B,wBAAyB,CAAEC,OAAQJ,KAEpChC,GACCN,EAAAA,cAAA,OAAK2C,MAAO,CAAEC,UAAW,SACvB5C,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,IAAIjC,EAAAA,EAAAA,GAAsByC,EAAUxC,YACxCC,EAAAA,cAAC6C,EAAAA,EAAM,CAACC,KAAK,MAAMP,EAAU9B,MAAQ,aAEvCT,EAAAA,cAAA,KAAG+C,KAAMR,EAAUS,cACjBhD,EAAAA,cAAC6C,EAAAA,EAAM,CAACC,KAAK,MAAK,uBAQhC,C,oOCxBA,MAAMG,EAAa,CAAC,WAAY,WAAY,UAAW,cACjDC,EAAyBA,KAC7B,MAAM3D,EAAWC,EAAAA,EACdC,QAAQC,GAAUuD,EAAWlC,SAASrB,EAAME,MAC5CX,KAAI,CAACS,EAAOE,KACX,MAAMC,GAAOC,EAAAA,EAAAA,GAAsBJ,EAAMK,WACzC,OACEC,EAAAA,cAACC,EAAAA,EAAG,CAACC,IAAKN,EAAIO,GAAI,EAAGC,GAAI,GACvBJ,EAAAA,cAACK,EAAAA,EAAsB,CACrBR,KAAMA,EACNS,UAAWZ,EAAMa,KACjBC,QAASd,EAAMe,QAEb,IAIZ,OACET,EAAAA,cAAA,WACEA,EAAAA,cAACW,EAAAA,EAAG,KAAEpB,GACF,EAIJ4D,EACJ,6lBAEa,SAASC,IAEtB,OAEEpD,EAAAA,cAACqD,EAAAA,EAAM,CAAChB,MAAM,cAAciB,cAAY,EAACC,eAAe,wGACtDvD,EAAAA,cAACoC,EAAAA,EAAmB,CAClBC,MAAM,cACNC,YAAaa,IAGfnD,EAAAA,cAAA,OAAKU,UAAU,cAAcd,GAAG,WAC9BI,EAAAA,cAACwD,EAAAA,EAAS,KACRxD,EAAAA,cAAA,MAAIJ,GAAG,WAAU,kCACjBI,EAAAA,cAAA,SAAG,6CAA0CA,EAAAA,cAAA,SAAG,kBAAkB,+CACzBA,EAAAA,cAAA,SAAG,UAAU,mBAC5CA,EAAAA,cAAA,SAAG,gBAAgB,8BAClBA,EAAAA,cAAA,SAAG,mBAAmB,2CAEjCA,EAAAA,cAAA,SAAG,4BAAyBA,EAAAA,cAAA,KAAG+C,KAAK,kDAAiD,gBAAgB,wHAGrG/C,EAAAA,cAACkD,EAAsB,QAI3BlD,EAAAA,cAACyD,EAAAA,EAAO,MAERzD,EAAAA,cAACwD,EAAAA,EAAS,KACRxD,EAAAA,cAAA,MAAIJ,GAAG,cAAaI,EAAAA,cAAC0D,EAAAA,GAAU,MAAG,qBAAkB1D,EAAAA,cAAA,YAAM,eAC1DA,EAAAA,cAAA,SAAG,6GAEiCA,EAAAA,cAAA,YAAM,cAAiB,kFACEA,EAAAA,cAAA,YAAM,UAAa,8CAGhFA,EAAAA,cAACW,EAAAA,EAAG,KACFX,EAAAA,cAAC4B,EAAAA,EAAmB,CAClBd,QAAQ,uBACRN,QAAQ,sCACRqB,OAAO,2BAET7B,EAAAA,cAAC4B,EAAAA,EAAmB,CAClBd,QAAQ,+BACRN,QAAQ,4CACRqB,OAAO,+CAGX7B,EAAAA,cAAA,SAAG,yKAGHA,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAI,qCACR/B,EAAAA,cAACa,EAAAA,EAAU,CAACC,QAAQ,8BAClBN,QAAQ,4DAIdR,EAAAA,cAACyD,EAAAA,EAAO,MAERzD,EAAAA,cAACwD,EAAAA,EAAS,KACRxD,EAAAA,cAAA,MAAIJ,GAAG,gBAAeI,EAAAA,cAAC0D,EAAAA,GAAU,MAAG,gBACpC1D,EAAAA,cAAA,SAAG,gFACKA,EAAAA,cAAA,KAAG+C,KAAK,mCAAkC,KAAK,UACjD/C,EAAAA,cAAA,KAAG+C,KAAK,wCAAuC,wBAAwB,qMAGrD/C,EAAAA,cAAA,KAAG+C,KAAK,sDAAqD,gBAAgB,KAErG/C,EAAAA,cAACW,EAAAA,EAAG,KACFX,EAAAA,cAACC,EAAAA,EAAG,CAACE,GAAI,GAAIC,GAAI,GACfJ,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAI,oCACR/B,EAAAA,cAACa,EAAAA,EAAU,CAACC,QAAS,yCAA0CN,QAAS,0FAG5ER,EAAAA,cAACC,EAAAA,EAAG,CAACE,GAAI,GAAIC,GAAI,GACfJ,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAI,yCACR/B,EAAAA,cAACa,EAAAA,EAAU,CAACC,QAAS,8CAA+CN,QAAS,6FAMrFR,EAAAA,cAACyD,EAAAA,EAAO,MAIRzD,EAAAA,cAAA,OAAKU,UAAU,cAAcd,GAAG,WAC9BI,EAAAA,cAACwD,EAAAA,EAAS,KACRxD,EAAAA,cAACZ,EAAAA,EAAkB,CAACE,YAAY,cAIpCU,EAAAA,cAACyD,EAAAA,EAAO,MAERzD,EAAAA,cAACwD,EAAAA,EAAS,KACRxD,EAAAA,cAAC2D,EAAAA,EAAO,OAGV3D,EAAAA,cAACyD,EAAAA,EAAO,MAId,C,4ECrGA,MAAMxD,EAAmB,cAEzB,CAAC2D,EAAOC,KACN,OAAO,UACLnD,KACGoD,IAEHC,GAAIC,EAAY,MAAK,SACrBC,EAAQ,MACRC,IAjDG,UAAgB,GACrBH,EAAE,SACFE,EAAQ,UACRvD,KACGkD,IAEHK,GAAW,QAAmBA,EAAU,OACxC,MAAME,GAAc,UACdC,GAAgB,UAChBF,EAAQ,GACRG,EAAU,GAqBhB,OApBAF,EAAYG,SAAQC,IAClB,MAAMC,EAAYZ,EAAMW,GAExB,IAAIE,EACAC,EACAC,SAHGf,EAAMW,GAIY,iBAAdC,GAAuC,MAAbA,IAEjCC,OACAC,SACAC,SACEH,GAEJC,EAAOD,EAET,MAAMI,EAAQL,IAAaH,EAAgB,IAAIG,IAAa,GACxDE,GAAMP,EAAMW,MAAc,IAATJ,EAAgB,GAAGR,IAAWW,IAAU,GAAGX,IAAWW,KAASH,KACvE,MAATE,GAAeN,EAAQQ,KAAK,QAAQD,KAASD,KACnC,MAAVD,GAAgBL,EAAQQ,KAAK,SAASD,KAASF,IAAS,IAEvD,CAAC,IACHd,EACHlD,UAAW,IAAWA,KAAcwD,KAAUG,IAC7C,CACDN,KACAE,WACAC,SAEJ,CAWOY,CAAOlB,GACZ,OAAoB,SAAKI,EAAW,IAC/BF,EACHD,IAAKA,EACLnD,UAAW,IAAWA,GAAYwD,EAAMa,QAAUd,IAClD,IAEJhE,EAAI+E,YAAc,MAClB,K,4EC1DA,MAAMrE,EAAmB,cAAiB,EACxCsD,WACAvD,YAEAqD,GAAIC,EAAY,SACbJ,GACFC,KACD,MAAMoB,GAAoB,QAAmBhB,EAAU,OACjDE,GAAc,UACdC,GAAgB,UAChBc,EAAa,GAAGD,SAChBZ,EAAU,GAehB,OAdAF,EAAYG,SAAQC,IAClB,MAAMC,EAAYZ,EAAMW,GAExB,IAAIY,SADGvB,EAAMW,GAEI,MAAbC,GAA0C,iBAAdA,IAE5BW,QACEX,GAEJW,EAAOX,EAET,MAAMI,EAAQL,IAAaH,EAAgB,IAAIG,IAAa,GAChD,MAARY,GAAcd,EAAQQ,KAAK,GAAGK,IAAaN,KAASO,IAAO,KAE7C,SAAKnB,EAAW,CAClCH,IAAKA,KACFD,EACHlD,UAAW,IAAWA,EAAWuE,KAAsBZ,IACvD,IAEJ1D,EAAIqE,YAAc,MAClB,K","sources":["webpack://the-python-graph-gallery/./src/components/ChartFamilySection.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SectionLogoWithOverlay.js","webpack://the-python-graph-gallery/./src/components/TitleAndDescription.js","webpack://the-python-graph-gallery/./src/pages/radar-chart.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Col.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n        <div className=\"sectionLogoContainer\">\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n        </div>\n      )}\n    </>\n  );\n}\n","import \"./titleAndDescription.css\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SocialMediaButtons from \"./SocialMediaButtons\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"gatsby\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n// import Sponsors from \"../components/Sponsors\";\n\n// Note that the description received is a string that contains html.\n// It was not possible to pass JSX since it is sometimes passed directly from\n// the python notebooks metadata\nexport default function TitleAndDescription({ title, description, chartType }) {\n  const chartInfo = chartTypesInfo.filter((chart) => chart.id === chartType)[0];\n\n  return (\n    <>\n      <div className=\"titleAndDescription\">\n        <h1 className=\"mainTitle\">{title}</h1>\n        <hr className=\"smallHr\" />\n        <SocialMediaButtons />\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n        {chartType && (\n          <div style={{ marginTop: \"10px\" }}>\n            <Link to={fullUrlToInternalLink(chartInfo.pythonURL)}>\n              <Button size=\"sm\">{chartInfo.label + \" section\"}</Button>\n            </Link>\n            <a href={chartInfo.dataToVizURL}>\n              <Button size=\"sm\">About this chart</Button>\n            </a>\n          </div>\n        )}\n      </div>\n      {/* <Sponsors /> */}\n    </>\n  );\n}\n\nTitleAndDescription.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  chartType: PropTypes.string\n};\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport SectionLogoWithOverlay from \"../components/SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\"\nimport { fullUrlToInternalLink } from \"../util/utils\";\nimport Spacing from \"../components/Spacing\";\n\nconst logoToKeep = ['lollipop', 'parallel', 'barplot', 'stackedBar']\nconst SpiderAlternativeLogos = () => {\n  const allLogos = chartTypesInfo\n    .filter((chart) => logoToKeep.includes(chart.id))\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/caveat/spider.html'>radar chart</a> (or <a href='https://www.data-to-viz.com/caveat/spider.html'>spider plot</a>, or <a href='https://www.data-to-viz.com/caveat/spider.html'>polar chart</a>) allows to visualize one or more series of values over multiple quantitative variables. Each variable has its own axis, all axes are joined in the center of the figure. This section shows how to build it with <code>Matplotlib</code>, but keep in mind they are some <a href='https://www.data-to-viz.com/caveat/spider.html'>caveats</a> associated with this chart type.</p>\";\n\nexport default function Radar() {\n\n  return (\n\n    <Layout title=\"Radar chart\" isTocEnabled seoDescription=\"A collection of radar chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Radar Chart\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Radar charts are criticized</h2>\n          <p>Spider plots are somewhat criticized. The <u>variable order</u> has\n            a huge impact on the chart appearance, <u>scales</u> can be\n            skewed, <u>overplotting</u> makes it hard to\n            read and <u>over-evaluation</u> of differences are the main arguments.\n          </p>\n          <p>You should probably read <a href='https://www.data-to-viz.com/caveat/spider.html'>this article</a> that explains the issues more in depth before building one,\n            and consider switching to one of the alternative below:\n          </p>\n          <SpiderAlternativeLogos />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib /> Radar chart with <code>Matplotlib</code></h2>\n        <p>\n          As far as I know there isn't any library offering a function to build a\n          spider plot quickly. Fortunately, <code>Matplotlib</code> allows a very high\n          level of customization. With a bit of trigonometry and the <code>plot()</code> function you\n          should get your desired viz.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"390_basic_Radarchart\"\n            caption=\"Most basic radar chart with python.\"\n            linkTo=\"/390-basic-radar-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"391_Several_indiv_Radarchart\"\n            caption=\"Radar chart with several displayed values\"\n            linkTo=\"/391-radar-chart-with-several-individuals\"\n          />\n        </Row>\n        <p>Radar charts are often used in combination with faceting. It allows to compare the features\n          of several groups, what would be unreadable if plotted on the same chart.\n        </p>\n        <Link to={\"/392-use-faceting-for-radar-chart\"}>\n          <ChartImage imgName=\"393_Faceting_and_Radarchart\"\n            caption=\"A polar chart with small multiple to compare 4 groups\" />\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-radar-chart-with-matplotlib\"}>\n              <ChartImage imgName={\"web-radar-chart-with-matplotlib-square\"} caption={\"An appealing radar chart with several groups to compare some penguins populations .\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-circular-barplot-with-matplotlib\"}>\n              <ChartImage imgName={\"web-circular-barplot-with-matplotlib-square\"} caption={\"A circular barchart with several features per group made with Python and Matplotlib.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["TITLES","distribution","correlation","ranking","partOfAWhole","evolution","map","flow","general","ChartFamilySection","_ref","chartFamily","allLogos","chartTypesInfo","filter","chart","family","id","link","fullUrlToInternalLink","pythonURL","React","Col","key","xs","md","SectionLogoWithOverlay","chartType","logo","caption","label","className","Row","allGifs","ChartImage","imgName","includes","image","useStaticQuery","allFile","edges","find","n","node","name","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Link","to","generalList","info","isGeneralFamily","SectionLogo","TitleAndDescription","title","description","chartInfo","SocialMediaButtons","dangerouslySetInnerHTML","__html","style","marginTop","Button","size","href","dataToVizURL","logoToKeep","SpiderAlternativeLogos","chartDescription","Radar","Layout","isTocEnabled","seoDescription","Container","Spacing","Matplotlib","Contact","props","ref","colProps","as","Component","bsPrefix","spans","breakpoints","minBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","push","useCol","length","displayName","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}