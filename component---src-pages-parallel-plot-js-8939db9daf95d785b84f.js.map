{"version":3,"file":"component---src-pages-parallel-plot-js-8939db9daf95d785b84f.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/parallel-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Animation, Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\nconst quickCode = `# libraries\nimport pandas\nimport matplotlib.pyplot as plt\nfrom pandas.tools.plotting import parallel_coordinates\n\n# Take the iris dataset\nimport seaborn as sns\ndata = sns.load_dataset('iris')\n\n# Make the plot\nparallel_coordinates(data, 'species', colormap=plt.get_cmap(\"Set2\"))\nplt.show()\n`\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/parallel.html'>parallel plot</a> plot allows to compare the feature of several individual observations (series) on a set of numeric variables. Interestingly, <code>Pandas</code> is probably the best way to plot a parallel coordinate plot with python. <code>Plotly</code> is a good alternative to plot interactive versions though.</p>\";\n\nexport default function Parallel() {\n\n  return (\n\n    <Layout title=\"Parallel coordinate plot\" isTocEnabled seoDescription=\"A collection of parallel coordinate chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Parallel coordinate plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>Pandas</code> is probably the best way to make a parallel coordinate plot. This library is most often used for data wrangling, but it offers a <code>parallel_coordinates()</code> function dedicated to it.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/150-parallel-plot-with-pandas\"}>\n              <ChartImage imgName=\"150_Parrallele_plot_with_pandas\"\n                caption=\"Most basic parallel plot with Python and Pandas.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">Parallel coordinate chart with <code>Python</code> and <code>Pandas</code></h2>\n        <p>\n          The following examples are dedicated to the <code>parallel_coordinates()</code> function\n          of <code>Pandas</code>. It shows how to apply the most common types of customization.\n        </p>\n        <p>If you need to go further, here is the complete <a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.parallel_coordinates.html'>pandas documentation</a></p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"150_Parrallele_plot_with_pandas\"\n            caption=\"Basic parallel coordinate char\"\n            linkTo=\"/150-parallel-plot-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\"><Animation />Interactive parallel coordinate with <code>plotly</code></h2>\n        <p><code>Plotly</code> is a python library that makes the link with Javascript to build interactive charts that you can display in a browser.</p>\n        <p>The following example is a parallel chart made with this library and the <code>parallel_coordinates()</code> function.</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/parallel-coordinate-plot-plotly.html\" title=\"parallel coordinate chart with plotly\" style={{ border: \"none\", width: '800px', height: '500px' }}></iframe>\n        </div>\n        <Link to=\"/parallel-coordinate-plot-plotly\">\n          <Button size=\"sm\">\n            See code\n          </Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-radar-chart-with-matplotlib\"}>\n              <ChartImage imgName={\"web-radar-chart-with-matplotlib-square\"} caption={\"A radar chart can be an alternative to a parallel coordinate plot.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-lemurs-parallel-chart\"}>\n              <ChartImage imgName={\"web-lemurs-parallel-chart-square\"} caption={\"A parallel plot or slope chart with groups, legend, title and annotation.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","quickCode","chartDescription","Parallel","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Animation","src","style","border","width","height","Button","size","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}