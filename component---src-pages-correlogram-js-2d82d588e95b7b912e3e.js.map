{"version":3,"file":"component---src-pages-correlogram-js-2d82d588e95b7b912e3e.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/correlogram.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlogram</a> or <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlation matrix</a> allows to analyse the relationship between each pair of numeric variables of a matrix. The correlation is visualised as a <a href='https://www.python-graph-gallery.com/scatter-plot'>scatterplot</a>. The diagonal represents the distribution of each variable with a <a href='https://www.python-graph-gallery.com/histogram'>histogram</a> or a <a href='https://www.python-graph-gallery.com/density-plot'>density plot</a>.</p > \";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\nimport matplotlib.pyplot as plt\n\n# Basic correlogram\nsns.pairplot(df)\nplt.show()\n`\n\nexport default function Correlogram() {\n\n  return (\n\n    <Layout title=\"Correlogram\" isTocEnabled seoDescription=\"A collection of correlogram examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Correlogram\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Once more, the <code>Seaborn</code> library is here to build a high\n            quality correlogram with a few lines of code only.ðŸ”¥</p>\n            <p>Note that all the stuff you learned in the <Link to='/scatter-plot'>scatterplot</Link>\n            and <Link to='/histogram'>histogram</Link> sections can be used here.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/110-basic-correlation-matrix-with-seaborn\"}>\n              <ChartImage imgName=\"110_Basic_Correlogram\"\n                caption=\"Basic correlogram with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Correlogram with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is definitely the best way to build a correlogram\n          with <code>python</code>. It provides a <code>pairplot()</code> function that\n          handles most of the work for you.\n          The examples below give an overview of the customizations you can apply to\n          it to suits your need.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom1\"\n            caption=\"Correlogram with linear trend displayed on each scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Apply colors to each group and customized the scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom7\"\n            caption=\"Customize the distributions displayed on the diagonal\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Correlogram with <code>Matplotlib</code></h2>\n        <p>\n          As usual it is totally possible to build the chart with Matplotlib, but requires\n          to write a bit more code. Basically, it is done using the subplots() function to create the grid, and\n          next building a loop to add the charts one by one.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"how-to-remove-axis-in-matplotlib\"\n            caption=\"How to remove some unused entries in a chart grid.\"\n            linkTo=\"/how-to-remove-axis-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Related\">&#128161; Scatterplot and Histogram sections are related</h2>\n          <p>Note that a correlogram is an aggregate of <Link to='/scatter-plot'>scatterplots</Link> and <Link to='/histogram'>histograms</Link>. Most of the customizations\n          described in those related sections can be applied here.\n          </p>\n          <Link to=\"/scatter-plot\">\n            <Button size=\"sm\">Scatterplot section</Button>\n          </Link>\n          <Link to=\"/histogram\">\n            <Button size=\"sm\">Histogram section</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","Correlogram","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","Seaborn","Matplotlib","Button","size","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}