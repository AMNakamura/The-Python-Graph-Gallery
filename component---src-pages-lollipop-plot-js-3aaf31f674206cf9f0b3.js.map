{"version":3,"file":"component---src-pages-lollipop-plot-js-3aaf31f674206cf9f0b3.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/lollipop-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/lollipop.html'>lollipop chart</a> is an alernative to the more usual <a href='https://www.python-graph-gallery.com/barplot'>barplot</a>. <code>Python</code> allows to build lollipops thanks to the <code>matplotlib</code> library, as shown in the examples below. The strategy here is to use the <code>stem()</code> function or to hack the <code>vline()</code> function depending on your input format.</p>\";\n\n\nconst quickCode = `# Create a dataframe\nimport pandas as pd\ndf = pd.DataFrame({'group':list(map(chr, range(65, 85))), 'values':np.random.uniform(size=20) })\n\n# Reorder it following the values:\nordered_df = df.sort_values(by='values')\nmy_range=range(1,len(df.index)+1)\n\n# Make the plot\nplt.stem(ordered_df['values'])\nplt.xticks( my_range, ordered_df['group'])\n`\n\n\nexport default function Lollipop() {\n\n  return (\n\n    <Layout title=\"Lollipop chart\" isTocEnabled seoDescription=\"A collection of lollipop plot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Lollipop plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>A <code>lollipop plot</code> displays each element of a dataset as a segment and a\n            circle.</p>\n            <p> This is doable with <code>python</code> and <code>Matplotlib</code> thanks to\n            the <code>stem()</code> function\n            that accepts a data frame as input.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/180-basic-lollipop-plot\"}>\n              <ChartImage imgName=\"180_Basic_lolipop_plot2\"\n                caption=\"Most basic lollipop plot with Python & Matplotlib.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Lollipop plot with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible python library for data visualization.\n          It is appropriate to build any kind of chart, including the\n          lollipop plot thanks to its <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"180_Basic_lolipop_plot\"\n            caption=\"Most basic lollipop. Will get you started with any kind of input format\"\n            linkTo=\"/180-basic-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"181_custom_lolliplot_2\"\n            caption=\"Basic circle customizations: shape, size, color and more.\"\n            linkTo=\"/181-custom-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"181_custom_lolliplot_3\"\n            caption=\"Change lollipop baseline position.\"\n            linkTo=\"/181-custom-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"182_vertical_lolipop_plot\"\n            caption=\"Horizontal lollipop chart (more readable labels).\"\n            linkTo=\"/182-vertical-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"183_highlight_a_group_in_lolipop_plot\"\n            caption=\"Highlight some specific groups in a lollipop.\"\n            linkTo=\"/183-highlight-a-group-in-lollipop\"\n          />\n          <ChartImageContainer\n            imgName=\"184_lolipop_plot_with_2_groups\"\n            caption=\"Cleveland chart: a lollipop chart with 2 subgroups displayed under each row.\"\n            linkTo=\"/184-lollipop-plot-with-2-groups\"\n          />\n          <ChartImageContainer\n            imgName=\"185_lolipop_plot_with_conditional_color\"\n            caption=\"Lollipop chart with conditional colors.\"\n            linkTo=\"/185-lollipop-plot-with-conditional-color\"\n          />\n        </Row>\n      </Container>\n\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-lollipop-plot-with-python-mario-kart-64-world-records\"}>\n              <ChartImage imgName={\"web-lollipop-plot-with-python-mario-kart-64-world-records-square\"} caption={\"A highly customized lollipop chart made with Python and Matplotlib. A work by CÃ©dric Scherer to visualize some Mario Kart World records.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-lollipop-plot-with-python-the-office\"}>\n              <ChartImage imgName={\"web-lollipop-plot-with-python-the-office-square\"} caption={\"A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-circular-lollipop-plot-with-matplotlib\"}>\n              <ChartImage imgName={\"web-circular-lollipop-plot-with-matplotlib-square\"} caption={\"A circular lollipop plot with customized layout, great color palette and in circle legend.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","Lollipop","title","isTocEnabled","seoDescription","description","id","href","chartFamily"],"sourceRoot":""}