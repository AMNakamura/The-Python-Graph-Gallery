{"version":3,"file":"component---src-pages-pie-plot-js-a6fa364d51da33a270d8.js","mappings":"2MAMMA,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIH,EAAQI,SAASF,GACnB,OACE,iCAGJ,IAuBMG,GAvBOC,EAAAA,EAAAA,gBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASF,MAG9B,OAAKG,EAMH,gCACE,uBAAKQ,UAAU,uBACb,gBAAC,IAAD,CACEC,IAAKX,EACLY,MAAOV,EAAMM,KAAKK,gBAAgBD,MAClCF,UAAU,kBAEZ,uBAAKA,UAAU,qBACb,uBAAKA,UAAU,yBACb,yBAAIV,OAdL,O,iGCvCI,SAASc,EAAT,GAA4D,IAA7Bf,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASe,EAAU,EAAVA,OAC9D,OACE,gBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,gBAAC,EAAAC,KAAD,CAAMC,GAAIJ,GACR,gBAAC,IAAD,CAAYhB,QAASA,EAASC,QAASA,Q,0NCqBhC,SAASoB,IAEtB,OAEE,gBAAC,IAAD,CAAQC,MAAM,WAAWC,cAAY,EAACC,eAAe,sGACnD,gBAAC,IAAD,CACEF,MAAM,WACNG,YArBN,qaAwBI,gBAAC,IAAD,KACE,sBAAIC,GAAG,SAAP,iBACA,gBAAC,IAAD,CAAKf,UAAU,sBACb,gBAAC,IAAD,CAAKO,GAAI,GACP,yBAAG,0CAAH,sBAA6C,gBAAC,EAAAC,KAAD,CAAMC,GAAG,aAAT,aAA7C,yBACc,qCADd,cAEA,iJAGF,gBAAC,IAAD,CAAKF,GAAI,GACP,gBAAC,EAAAC,KAAD,CAAMC,GAAI,8BACR,gBAAC,IAAD,CAAYpB,QAAQ,6BAClBC,QAAQ,yDAIhB,gBAAC,IAAD,KArCO,8KAwCT,gBAAC,IAAD,MAEA,uBAAKU,UAAU,eACb,gBAAC,IAAD,KACE,sBAAIe,GAAG,WAAP,yBACA,wOAGmB,gBAAC,EAAAP,KAAD,CAAMC,GAAG,YAAT,YAHnB,OAG0D,gBAAC,EAAAD,KAAD,CAAMC,GAAG,YAAT,WAH1D,SAGkG,gBAAC,EAAAD,KAAD,CAAMC,GAAG,kBAAT,YAHlG,UAIA,0GACA,uBAAKO,MAAO,CAAEC,SAAU,QAASC,OAAQ,WACvC,qBAAGC,KAAK,+CACN,gBAAC,IAAD,CAAY9B,QAAS,gBAAiBC,QAAS,mJAGnD,qBAAG6B,KAAK,+CACN,gBAAC,IAAD,CAAQC,KAAK,MAAb,wBAEF,iEAAwC,uCAAxC,QAAiE,sCAAjE,6FAMJ,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIL,GAAG,cAAa,gBAAC,KAAD,MAApB,kBAAiD,2CACjD,4EACkD,qCADlD,iGAIA,gBAAC,IAAD,KACE,gBAAC,IAAD,CACE1B,QAAQ,uCACRC,QAAQ,+BACRe,OAAO,+BAET,gBAAC,IAAD,CACEhB,QAAQ,wCACRC,QAAQ,mCACRe,OAAO,+BAET,gBAAC,IAAD,CACEhB,QAAQ,mCACRC,QAAQ,4CACRe,OAAO,iCAKb,gBAAC,IAAD,MAEA,uBAAKL,UAAU,cAAce,GAAG,WAC9B,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAoBM,YAAY,mBAIpC,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,gBAAC,IAAD,OAGF,gBAAC,IAAD","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/pie-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/caveat/pie.html'>Pie Chart</a> is a circle divided into sectors that each represent a proportion of the whole. It is one of the most common viz type, but also probably the most <a href='https://www.data-to-viz.com/caveat/pie.html'>criticized</a>. In python, they are most of the time done thanks to the <code>pie()</code> function of the <code>Matplotlib</code> library.</p>\";\n\n\nconst quickCode = `# library\nimport matplotlib.pyplot as plt\n\n# create data: an array of values\nsize_of_groups=[12,11,3,30]\n\n# Create a pieplot\nplt.pie(size_of_groups)\nplt.show()\n`\n\nexport default function Pie() {\n\n  return (\n\n    <Layout title=\"Pie plot\" isTocEnabled seoDescription=\"A collection of Pie chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Pie Plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>matplotlib</code> allows to build a <Link to=\"/pie-plot\">pie chart</Link> easily\n            thanks to its <code>pie()</code> function.</p>\n            <p>The input data you must provide is an array of numbers, where each numbers will be mapped\n              to one of the pie item.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/pie-plot-matplotlib-basic\"}>\n              <ChartImage imgName=\"pie-plot-matplotlib-basic1\"\n                caption=\"Most basic donut chart with Python and Matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Mind the pie chart</h2>\n          <p>Pie chart is probably the most criticized chart type. Humans\n          are pretty bad at reading angles, making it hard to rank the groups\n          accurately. Most of the time, it is better to display the\n            information as a <Link to='/barplot'>barchart</Link>, a <Link to='/treemap'>treemap</Link> or a <Link to='/lollipop-plot'>lollipop</Link> plot.</p>\n          <p>Have a look to the 3 pie charts below, can you spot the pattern hidden in it?</p>\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\n            <a href=\"https://www.data-to-viz.com/caveat/pie.html\">\n              <ChartImage imgName={'pieChartIssue'} caption={\"Can you spot the pattern hidden behind those 3 pie charts? Click to see the same info visualized as barplots: much more insightful isn't it?\"} />\n            </a>\n          </div>\n          <a href='https://www.data-to-viz.com/caveat/pie.html'>\n            <Button size=\"sm\">See it as a barplot</Button>\n          </a>\n          <p>Last but not least, please avoid the <code>explode</code> and <code>shadow</code> options of the pie() function, they\n            are killing all the most basic dataviz principles.\n          </p>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Pie chart with <code>Matplotlib</code></h2>\n        <p>\n          The examples below should guide you through the <code>pie()</code> function\n          usage. It starts basics and then show how to add labels, customize colors and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"pie-plot-matplotlib-basic-add-labels\"\n            caption=\"Add and customize the labels\"\n            linkTo=\"/pie-plot-matplotlib-basic\"\n          />\n          <ChartImageContainer\n            imgName=\"pie-plot-matplotlib-basic-add-padding\"\n            caption=\"Customize the pie section colors\"\n            linkTo=\"/pie-plot-matplotlib-basic\"\n          />\n          <ChartImageContainer\n            imgName=\"pie-plot-matplotlib-basic-colors\"\n            caption=\"Add blank space between each pie section.\"\n            linkTo=\"/pie-plot-matplotlib-basic\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","Pie","title","isTocEnabled","seoDescription","description","id","style","maxWidth","margin","href","size","chartFamily"],"sourceRoot":""}