{"version":3,"file":"component---src-pages-area-plot-js-efc88f3055046000b7f2.js","mappings":"4MAMMA,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIH,EAAQI,SAASF,GACnB,OACE,iCAGJ,IAuBMG,GAvBOC,EAAAA,EAAAA,gBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASF,MAG9B,OAAKG,EAMH,gCACE,uBAAKQ,UAAU,uBACb,gBAAC,IAAD,CACEC,IAAKX,EACLY,MAAOV,EAAMM,KAAKK,gBAAgBD,MAClCF,UAAU,kBAEZ,uBAAKA,UAAU,qBACb,uBAAKA,UAAU,yBACb,yBAAIV,OAdL,O,iGCvCI,SAASc,EAAT,GAA4D,IAA7Bf,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASe,EAAU,EAAVA,OAC9D,OACE,gBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,gBAAC,EAAAC,KAAD,CAAMC,GAAIJ,GACR,gBAAC,IAAD,CAAYhB,QAASA,EAASC,QAASA,Q,gNCqBhC,SAASoB,IAEtB,OAEE,gBAAC,IAAD,CAAQC,MAAM,aAAaC,cAAY,EAACC,eAAe,uGAErD,gBAAC,IAAD,CACEF,MAAM,aACNG,YAvBN,ieA0BI,gBAAC,IAAD,KACE,sBAAIC,GAAG,SAAP,iBACA,gBAAC,IAAD,CAAKf,UAAU,sBACb,gBAAC,IAAD,CAAKO,GAAI,GACP,yJACA,0BACE,iCAAQ,8CAAR,aACA,iCAAQ,2CAAR,qCAAkE,gBAAC,EAAAC,KAAD,CAAMC,GAAG,sBAAT,gBAAlE,aAGJ,gBAAC,IAAD,CAAKF,GAAI,GACP,gBAAC,EAAAC,KAAD,CAAMC,GAAI,yBACR,gBAAC,IAAD,CAAYpB,QAAQ,uBAClBC,QAAQ,yEAIhB,gBAAC,IAAD,KAzCO,uKA4CT,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIyB,GAAG,cAAa,gBAAC,KAAD,MAApB,mBAAkD,2CAClD,yBACE,0CADF,wDAC8E,8CAD9E,wGAIA,gBAAC,IAAD,KACE,gBAAC,IAAD,CACE1B,QAAQ,uBACRC,QAAQ,oEACRe,OAAO,0BAET,gBAAC,IAAD,CACEhB,QAAQ,yBACRC,QAAQ,mCACRe,OAAO,4BAET,gBAAC,IAAD,CACEhB,QAAQ,yBACRC,QAAQ,qBACRe,OAAO,6BAGX,uBAAKW,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,gBAAC,EAAAX,KAAD,CAAMC,GAAG,mCACP,gBAAC,IAAD,CAAYpB,QAAS,yBAA0BC,QAAS,mCAK9D,gBAAC,IAAD,MAEA,gBAAC,IAAD,KACE,sBAAIyB,GAAG,WAAU,gBAAC,KAAD,MAAjB,mBAA4C,wCAC5C,yBACE,uCADF,6DACgF,sCADhF,8JAKA,uBAAKC,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,gBAAC,EAAAX,KAAD,CAAMC,GAAG,gCACP,gBAAC,IAAD,CAAYpB,QAAS,8BAA+BC,QAAS,+CAKnE,gBAAC,IAAD,MAEA,uBAAKU,UAAU,cAAce,GAAG,WAC9B,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAoBK,YAAY,gBAIpC,gBAAC,IAAD,MAGA,gBAAC,IAAD,KACE,gBAAC,IAAD,OAGF,gBAAC,IAAD","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/area-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>An <a href='https://www.data-to-viz.com/graph/area.html'>area chart</a> is really similar to a <a href='http://python-graph-gallery.com/line-chart/'>line chart</a>, except that the area between the x axis and the line is filled in with color or shading. It represents the evolution of a numeric variable. This section starts by considering <code>matplotlib</code> and <code>seaborn</code> as tools to build area charts. It then shows a few other options for timeseries.</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny=[1,4,6,8,4]\n\n# Area plot\nplt.fill_between(x, y)\nplot.show()\n`\n\nexport default function LinePlot() {\n\n  return (\n\n    <Layout title=\"Area chart\" isTocEnabled seoDescription=\"A collection of area chart examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Area Chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>There are 2 main ways to build an area chart with Matplotlib. In both case it requires 2 numeric vectors of values as input.</p>\n            <ul>\n              <li>The <code>fill_between()</code> function</li>\n              <li>The <code>stackplot()</code> function that is more useful for <Link to='/stacked-area-plot'>stacked area</Link> charts</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/240-basic-area-chart\"}>\n              <ChartImage imgName=\"240_basic_area_chart\"\n                caption=\"The most basic area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Area chart with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build an area chart thanks to its <code>fill_between()</code> function. Here are a few examples explaining its basics\n          and how to apply some common customization.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart1\"\n            caption=\"Control chart color (Matplotlib)\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart2\"\n            caption=\"Control line color\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/243-area-chart-with-white-grid'>\n            <ChartImage imgName={'243_another_area_chart'} caption={'Area chart with custom grid'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Area chart with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/242-area-chart-and-faceting'>\n            <ChartImage imgName={'242_area_chart_and_faceting'} caption={'Area chart with small multiple, seaborn'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","LinePlot","title","isTocEnabled","seoDescription","description","id","style","maxWidth","margin","padding","chartFamily"],"sourceRoot":""}