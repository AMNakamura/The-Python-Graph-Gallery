{"version":3,"file":"component---src-pages-parallel-plot-js-bebe5b0a819f8b73bcd2.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/parallel-plot.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto|Montserrat\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n\n      <script>\n        {`(function (w, d) {\n               w.adthrive = w.adthrive || {};\n               w.adthrive.cmd = w.adthrive.cmd || [];\n               w.adthrive.plugin = \"adthrive-ads-manual\";\n               w.adthrive.host = \"ads.adthrive.com\";\n               var s = d.createElement(\"script\");\n               s.async = true;\n               s.referrerpolicy = \"no-referrer-when-downgrade\";\n               s.src =\n                 \"https://\" +\n                 w.adthrive.host +\n                 \"/sites/6434366c7ccf1c58d32ab68f/ads.min.js?referrer=\" +\n                 w.encodeURIComponent(w.location.href) +\n                 \"&cb=\" +\n                 (Math.floor(Math.random() * 100) + 1);\n               var n = d.getElementsByTagName(\"script\")[0];\n               n.parentNode.insertBefore(s, n);\n             })(window, document);`}\n      </script>\n    </>\n  );\n};\n\n// Tried the idle strategy for AdThrive script put reported as unperformant by Raptive.\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Animation, Matplotlib } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport ChartImage from '../components/ChartImage';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst quickCode = `# libraries\nimport pandas\nimport matplotlib.pyplot as plt\nfrom pandas.tools.plotting import parallel_coordinates\n\n# Take the iris dataset\nimport seaborn as sns\ndata = sns.load_dataset('iris')\n\n# Make the plot\nparallel_coordinates(data, 'species', colormap=plt.get_cmap(\"Set2\"))\nplt.show()\n`;\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/parallel.html'>parallel plot</a> plot allows to compare the feature of several individual observations (series) on a set of numeric variables. Interestingly, <code>Pandas</code> is probably the best way to plot a parallel coordinate plot with python. <code>Plotly</code> is a good alternative to plot interactive versions though.</p>\";\n\nexport const Head = () => (\n  <SEO\n    title=\"Parallel coordinate plot\"\n    seoDescription=\"A collection of parallel coordinate chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Parallel() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Parallel coordinate plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>Pandas</code> is probably the best way to make a parallel\n              coordinate plot. This library is most often used for data\n              wrangling, but it offers a <code>parallel_coordinates()</code>{' '}\n              function dedicated to it.🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/150-parallel-plot-with-pandas'}>\n              <ChartImage\n                imgName=\"150_Parrallele_plot_with_pandas\"\n                caption=\"Most basic parallel plot with Python and Pandas.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">\n          Parallel coordinate chart with <code>Python</code> and{' '}\n          <code>Pandas</code>\n        </h2>\n        <p>\n          The following examples are dedicated to the{' '}\n          <code>parallel_coordinates()</code> function of <code>Pandas</code>.\n          It shows how to apply the most common types of customization.\n        </p>\n        <p>\n          If you need to go further, here is the complete{' '}\n          <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.parallel_coordinates.html\">\n            pandas documentation\n          </a>\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"150_Parrallele_plot_with_pandas\"\n            caption=\"Basic parallel coordinate char\"\n            linkTo=\"/150-parallel-plot-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          Parallel coordinate chart with <code>Seaborn</code>\n        </h2>\n        <p>\n          <Link href=\"/seaborn\">Seaborn</Link> and its <code>lineplot()</code>{' '}\n          function is another very good alternative when it comes to create\n          parallel coordinate charts with Python.{' '}\n        </p>\n        <p>\n          Used in conjunction with <Link href=\"/matplotlib\">matplotlib</Link>,\n          it allows to reach a great level of customization as shown in the\n          example below\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"501-parallel-plot-seaborn\"\n            caption=\"Basic parallel coordinate chart with Seaborn\"\n            linkTo=\"/501-parallel-plot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"web-slope-chart-matplotlib-square\"\n            caption=\"A polished slope chart made with Python, Seaborn and Matplotlib\"\n            linkTo=\"/web-slope-chart-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\">\n          <Animation />\n          Interactive parallel coordinate with <code>plotly</code>\n        </h2>\n        <p>\n          <code>Plotly</code> is a python library that makes the link with\n          Javascript to build interactive charts that you can display in a\n          browser.\n        </p>\n        <p>\n          The following example is a parallel chart made with this library and\n          the <code>parallel_coordinates()</code> function.\n        </p>\n        <div className=\"mx-auto\">\n          <iframe\n            src=\"/interactiveCharts/parallel-coordinate-plot-plotly.html\"\n            title=\"parallel coordinate chart with plotly\"\n            style={{ border: 'none', width: '800px', height: '500px' }}\n          ></iframe>\n        </div>\n        <Link to=\"/parallel-coordinate-plot-plotly\">\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python parallel plot examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://www.python-graph-gallery.com\">\n            Python graph gallery\n          </a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={'/web-radar-chart-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-radar-chart-with-matplotlib-square'}\n                caption={\n                  'A radar chart can be an alternative to a parallel coordinate plot.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-lemurs-parallel-chart'}>\n              <ChartImage\n                imgName={'web-lemurs-parallel-chart-square'}\n                caption={\n                  'A parallel plot or slope chart with groups, legend, title and annotation.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","href","rel","content","property","quickCode","chartDescription","Head","Parallel","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","Animation","src","style","border","width","height","Button","size","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}