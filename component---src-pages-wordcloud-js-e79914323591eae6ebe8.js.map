{"version":3,"file":"component---src-pages-wordcloud-js-e79914323591eae6ebe8.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/wordcloud.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto|Montserrat\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Col } from 'react-bootstrap';\nimport ChartImage from '../components/ChartImage';\nimport SectionLogoWithOverlay from '../components/SectionLogoWithOverlay';\nimport { chartTypesInfo } from '../util/sectionDescriptions';\nimport { fullUrlToInternalLink } from '../util/utils';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst logoToKeep = ['lollipop', 'barplot', 'treemap', 'circularPacking'];\nconst WordAlternativeLogos = () => {\n  const allLogos = chartTypesInfo\n    .filter((chart) => logoToKeep.includes(chart.id))\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n};\n\nconst quickCode = `# Libraries\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Create a list of word\ntext=(\"Python Python Python Matplotlib\")\n\n# Create the wordcloud object\nwordcloud = WordCloud(width=480, height=480, margin=0).generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()\n`;\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/wordcloud.html'>word cloud</a> (also called <a href='https://www.data-to-viz.com/graph/wordcloud.html'>tag cloud</a> or <a href='https://www.data-to-viz.com/graph/wordcloud.html'>weighted list</a>) is a visual representation of text data. Words are usually single words, and the importance of each is shown with font size or color. <code>Python</code> fortunately has a <code>wordcloud</code> library allowing to build them.</p>\";\n\nexport const Head = () => (\n  <SEO\n    title=\"Wordcloud\"\n    seoDescription=\"A collection of wordcloud examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Wordcloud() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Wordcloud\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The <code>wordcloud</code> library is here to help you build a\n              wordcloud in minutes. Here is a basic code snippets using the{' '}\n              <code>WordCloud()</code> function to get you started.🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/260-basic-wordcloud'}>\n              <ChartImage\n                imgName=\"260_Basic_Wordcloud\"\n                caption=\"Most basic wordcloud with python and the wordcloud library.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; The issue with wordclouds</h2>\n          <p>\n            Wordclouds are aesthetically pleasing and people are used to it,\n            what make sure readers will understand them quick.\n          </p>\n          <p>\n            However, it is important to consider the caveats associated to them.\n            For instance,\n            <u>longer words</u> will t<u>ake more space</u> on the figure by\n            construction which distorts reality. Moreover, it is impossible to{' '}\n            <u>translate a font size</u> to an accurate value.\n          </p>\n          <WordAlternativeLogos />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Wordcloud\">\n          Wordclouds with.. the <code>wordcloud</code> library &#128512;\n        </h2>\n        <p>\n          The <code>wordcloud</code> library takes as input a{' '}\n          <code>string</code> containing all the words you want to display. It\n          passes it to the <code>Wordcloud()</code> function that will compute\n          the display an show it on the screen thanks to the{' '}\n          <code>imshow()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud1\"\n            caption=\"Wordcloud customization: word size.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud4\"\n            caption=\"Wordcloud customization: background color.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261_Custom_Wordcloud5\"\n            caption=\"Wordcloud customization: word color.\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Custom shapes\">Wordclouds and custom shapes</h2>\n        <p>\n          It is a common need to apply a specific shape to the wordcloud. TODO.\n          Make a bette image. TODO: more proiminent link toward\n          https://github.com/amueller/word_cloud\n        </p>\n        <div style={{ maxWidth: '750px', margin: 'auto' }}>\n          <Link to={'/262-worcloud-with-specific-shape'}>\n            <ChartImage\n              imgName=\"262_Wordcloud_with_a_Mask\"\n              caption=\"Use a mask to get a wordcloud with specific shape.\"\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","href","rel","content","property","logoToKeep","WordAlternativeLogos","allLogos","chartTypesInfo","filter","chart","id","map","link","fullUrlToInternalLink","pythonURL","key","SectionLogoWithOverlay","chartType","logo","label","Row","quickCode","chartDescription","Head","Wordcloud","Layout","isTocEnabled","TitleAndDescription","description","Container","CodeChunk","Spacing","style","maxWidth","margin","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}