{"version":3,"file":"component---src-pages-scatter-plot-js-c005234d8df310126012.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/scatter-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/scatter.html'>scatter plot</a> displays the relationship between 2 numeric variables. Each data point is represented as a circle. Several tools allow to build one in python, this section provides code samples for <code>Seaborn</code>, <code>Matplotlib</code> and <code>Plotly</code> for interactive versions.  Note that this <a target='_blank' href='https://datacamp.pxf.io/YgNDbR'>online course</a> has a chapter dedicated to scatterplots.</p>\";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# use the function regplot to make a scatterplot\nsns.regplot(x=df[\"sepal_length\"], y=df[\"sepal_width\"])\n`\n\nconst quickCodeMatplotlib = `# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a dataset:\ndf=pd.DataFrame({'x_values': range(1,101), 'y_values': np.random.randn(100)*15+range(1,101) })\n\n# plot\nplt.plot( 'x_values', 'y_values', data=df, linestyle='none', marker='o')\nplt.show()\n`\n\nexport default function ViolinPlot() {\n\n  return (\n\n    <Layout title=\"Scatterplot\" isTocEnabled seoDescription=\"A collection of scatterplot examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Scatterplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick start\">&#9201; Quick start (Seaborn)</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>regplot()</code> function of the <code>Seaborn</code> library is definitely the best way to build a scatterplot in minutes. ðŸ”¥</p>\n            <p>Simply pass a numeric column of a data frame to both the <code>x</code> and <code>y</code> variable and the function will handle the rest.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/40-basic-scatterplot-seaborn\"}>\n              <ChartImage imgName=\"40_Basic_Scatterplot_seaborn\"\n                caption=\"Basic boxplot with Python and Seaborn from various data input formats.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Common caveats\">&#9888;&#65039; Scatterplot and overplotting</h2>\n          <p>The main danger with scatterplots is <a href=\"https://www.data-to-viz.com/caveat/overplotting.html\">overplotting</a>. When the sample size gets big, circles tend to overlap, making the figure unreadable.</p>\n          <p>Several workarounds exist to fix the issue, like using opacity or switching to another chart type:</p>\n          <Row>\n            <ChartImageContainer\n              imgName=\"134_Fighting_overplotting1\"\n              caption=\"Basic boxplot. You can quickly read the median, quartiles and outliers of each group.\"\n              linkTo=\"/134-how-to-avoid-overplotting-with-python\"\n            />\n            <ChartImageContainer\n              imgName=\"134_Fighting_overplotting2\"\n              caption=\"If you add individual points with jitter, a bimodal distribution appears for group B\"\n              linkTo=\"/134-how-to-avoid-overplotting-with-python\"\n            />\n            <ChartImageContainer\n              imgName=\"134_Fighting_overplotting10\"\n              caption=\"If you have a very large dataset, the violin plot is a better alternative than jittering\"\n              linkTo=\"/134-how-to-avoid-overplotting-with-python\"\n            />\n          </Row>\n          <Link to=\"/134-how-to-avoid-overplotting-with-python\">\n            <Button size=\"sm\">Code and more</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Scatterplots with <code>Seaborn</code></h2>\n        <p>\n          <Link to='/seaborn'>Seaborn</Link> is a python library allowing to make better\n          charts easily. The <code>regplot()</code> function should get you started in\n          minutes. The <Link to='/40-basic-scatterplot-seaborn'>first example</Link> below\n          explains how to build the most basic scatterplot with python. Then, several\n          types of customization are described: adding a <Link to='/42-custom-linear-regression-fit-seaborn'>regression</Link> line, tweaking <Link to='/41-control-marker-features'>markers</Link>\n          and <Link to='/44-control-axis-limits-of-plot-seaborn'>axis</Link>, adding <Link to='/46-add-text-annotation-on-scatterplot'>labels</Link> and more.\n\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"40_Basic_Scatterplot_seaborn\"\n            caption=\"Most basic scatterplot with seaborn\"\n            linkTo=\"/40-basic-scatterplot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"42_Scatterplot_custom_linear_fit_seaborn\"\n            caption=\"Add a regression thanks to the fit_reg parameter\"\n            linkTo=\"/42-custom-linear-regression-fit-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"41_Scatterplot_change_marker_shape_seaborn\"\n            caption=\"Customize markers: color, size, opacity, type and more\"\n            linkTo=\"/41-control-marker-features\"\n          />\n          <ChartImageContainer\n            imgName=\"43_seaborn_map_color_to_a_avariable3\"\n            caption=\"Color dots according to a group\"\n            linkTo=\"/43-use-categorical-variable-to-color-scatterplot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"44_seaborn_control_axis_limits\"\n            caption=\"Control X and Y axes limits\"\n            linkTo=\"/44-control-axis-limits-of-plot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"45_set_color_of_each_point_in_scatterplot_seaborn\"\n            caption=\"Control the marker's color according to their coordinates\"\n            linkTo=\"/45-control-color-of-each-marker-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"46_add_text_annotation_scatterplot_seaborn3\"\n            caption=\"Add labels manually on your scatterplot\"\n            linkTo=\"/46-add-text-annotation-on-scatterplot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Related to Seaborn \">&#128161; Other charts involving scatterplots and <code>Seaborn</code></h2>\n        <p>If you are interested in scatterplots, some other chart could be useful to you.</p>\n        <p>A scatterplot with <Link to=\"/82-marginal-plot-with-seaborn\">marginal distribution</Link> allows to check the distribution of both the <code>x</code> and <code>y</code> variables. A <Link to=\"/111-custom-correlogram\">correlogram</Link> allows to check the relationship between each pair of numeric variables in a dataset.</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot4\"\n            caption=\"Scatterplot with marginal distributions\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Build a correlogram with the pairplot function\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick start\">&#9201; Quick start (Matplotlib)</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><Link to='/matplotlib'>Matplotlib</Link> also requires only a few lines of code to draw a scatterplot thanks to its <code>plot()</code> function. The resulting chart\n          is not as good-looking, but the function probably offers more flexibility in term of customization.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/130_Basic_Matplotlib_Scatterplot\"}>\n              <ChartImage imgName=\"130_Basic_Matplotlib_Scatterplot\"\n                caption=\"Most basic scatterplot with Matplotlib.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCodeMatplotlib}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Scatterplots with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is another great alternative to build scatterplots\n          with python. As often, it takes a bit more lines of code to get a decent\n          chart, but allows more customization.\n        </p>\n        <p>\n          The examples below should get you covered\n          for all the most common problems: adding <Link to='/193-annotate-matplotlib-chart'>markers</Link>, adding\n          <Link to='/193-annotate-matplotlib-chart'>labels</Link>, changing <Link to='/131-custom-a-matplotlib-scatterplot'>shapes</Link> and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"130_Basic_Matplotlib_Scatterplot\"\n            caption=\"Most basic scatterplot with Matplotlib\"\n            linkTo=\"/130-basic-matplotlib-scatterplot\"\n          />\n          <ChartImageContainer\n            imgName=\"131_Custom_Matplotlib_Scatterplot5\"\n            caption=\"Customize marker features: size, color, stroke, type and more\"\n            linkTo=\"/131-custom-a-matplotlib-scatterplot\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate6\"\n            caption=\"Display a math equation on your matplotlib chart\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate5\"\n            caption=\"Matplotlib: add horizontal and vertical ablines\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate2\"\n            caption=\"Highlight a specific area of the chart with Matplotlib\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate1\"\n            caption=\"Add an annotation to highlight a specific marker\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"manhattan-plot-with-matplotlib\"\n            caption=\"How to build a Manhattan plot with Python and Matplotlib\"\n            linkTo=\"/manhattan-plot-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"custom-legend-with-matplotlib2\"\n            caption=\"Scatterplot with grouping and legend\"\n            linkTo=\"/custom-legend-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"custom-legend-with-matplotlib6\"\n            caption=\"Legend customization: how to control location, add a background, customize labels and markers and more\"\n            linkTo=\"/custom-legend-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"scatterplot-and-log-scale-in-matplotlib\"\n            caption=\"How to use a log scale for the X or the Y axis.\"\n            linkTo=\"/scatterplot-and-log-scale-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"scatterplot-with-regression-fit-in-matplotlib\"\n            caption=\"How to compute and add a linear regression to a scatterplot with Python and matplotlib\"\n            linkTo=\"/scatterplot-with-regression-fit-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works.\n        </p>\n        <p>The <Link to='/web-text-repel-with-matplotlib'>first example</Link> below demos how to add clean labels on a scatterplot, automatically avoiding\n          overlapping. It also explains how to control background, fonts, titles and more.\n        </p>\n        <p>If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-text-repel-with-matplotlib\"}>\n              <ChartImage imgName={\"web-text-repel-with-matplotlib-square\"} caption={\"Learn how to use the adjustText library to add many labels with no overlaps.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-scatterplot-text-annotation-and-regression-matplotlib\"}>\n              <ChartImage imgName={\"web-scatterplot-text-annotation-and-regression-matplotlib-square\"} caption={\"Scatterplot with regression fit, group colors and non-overlapping labels.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-scatterplot-astronaut\"}>\n              <ChartImage imgName={\"web-scatterplot-astronaut-square\"} caption={\"Dark mode scatterplot with custom annotations, title and explanations. All of that with a very good appearance!\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","ViolinPlot","title","isTocEnabled","seoDescription","description","id","href","size","chartFamily"],"sourceRoot":""}