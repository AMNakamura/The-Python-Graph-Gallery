{"version":3,"file":"component---src-pages-3-d-js-bcfe15c3ced6620e1c93.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/3d.js","webpack://the-python-graph-gallery/./static/graph/animated_volcano.gif"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport Spacing from \"../components/Spacing\";\nimport ChartImage from \"../components/ChartImage\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport volcanoGif from \"../../static/graph/animated_volcano.gif\"\n\nconst chartDescription =\n  \"<p>Python allows to build 3D charts thanks to the <code>mplot3d</code> toolkit of the <code>matplotlib</code> library. However, please note that 3d charts are most often a bad practice. This section focuses on 3d scatter plots and surface plots that are some interesting use cases.\";\n\nconst quickCode = `# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n\n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['X'], df['Y'], df['Z'], c='skyblue', s=60)\nax.view_init(30, 185)\nplt.show()\n`\n\nexport default function ThreeD() {\n\n  return (\n\n    <Layout title=\"Three-Dimensional plotting\" isTocEnabled seoDescription=\"A collection of 3d chart examples made with Python, coming with explanation and reproducible code\">\n\n\n      <TitleAndDescription\n        title=\"Three-Dimensional plotting\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>mplot3d</code> toolkit of <code>matplotlib</code> is used here.</p>\n            <ul>\n              <li>The projection parameter of the add_subplot() function is set to <code>3d</code></li>\n              <li>The usual <code>scatter()</code> function can now be called with 3 data inputs for the X, Y and Z axis</li>\n              <li>The camera position can be set thanks to the <code>view_init()</code> function</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/370-3d-scatterplot\"}>\n              <ChartImage imgName=\"370_3D_scatterplot\"\n                caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <Link to=\"/341-python-gapminder-animation\">\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Mind the 3d</h2>\n          <p>Three dimensional objects are very popular but negatively affect\n            the <u>accuracy</u> and <u>speed</u> at which one can interpret a graphic in most cases.</p>\n          <p>In the example below, the brown section in front looks much bigger than the pink section in the back,\n          even tough their real values are 30% vs 35%. Data is distorted.\n          </p>\n          <div style={{ maxWidth: \"350px\", margin: \"0 auto\" }}>\n            <a href=\"https://www.data-to-viz.com/caveat/3d.html\">\n              <ChartImage imgName={'3d_is_bad'} caption={\"An example of a bad 3d pie chart\"} />\n            </a>\n          </div>\n          <a href='https://www.data-to-viz.com/caveat/3d.html'>\n            <Button size=\"sm\">Full article</Button>\n          </a>\n          <br /><br />\n          <p><u>Note</u>: remember pie charts should be avoided <a href='https://www.data-to-viz.com/caveat/pie.html'>most of the time</a></p>\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"3d scatterplot\"><Matplotlib />Three-dimensional scatterplots with <code>Matplotlib</code></h2>\n        <p>\n          As described in the quick start section above, a three dimensional can be built with python thanks to the\n          <code>mplot3d</code> toolkit of <code>matplotlib</code>. The example below will guide you through its usage\n          to get this figure:\n        </p>\n        <div style={{ maxWidth: \"450px\" }}>\n          <Link to={\"/370-3d-scatterplot\"}>\n            <ChartImage imgName=\"370_3D_scatterplot\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n          </Link>\n        </div>\n        <p>This technique is useful to visualize the result of a PCA (Principal Component Analysis). The following example explains how to run\n        a PCA with python and check its result with a 3d scatterplot:\n        </p>\n        <div style={{ maxWidth: \"450px\" }}>\n          <Link to=\"/372-3d-pca-result\">\n            <ChartImage imgName={'372_3D_PCA_result'} caption={\"PCA result shown as a 3D scatterplot with python\"} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Surface plot\"><Matplotlib />Surface plot with <code>Matplotlib</code></h2>\n        <p>\n          A surface plot considers the X and Y coordinates as latitude and longitude, and Z as the altitude. It\n          represents the dataset as a surface by interpolating positions between data points.\n        </p>\n        <p>This kind of chart can also be done thanks to the <code>mplot3d</code> toolkit of <code>matplotlib</code>. The\n        posts linked below explain how to use and customize the <code>trisurf()</code> function that is used for surface plots.</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_1\"\n            caption=\"Most basic surface plot with Python\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_2\"\n            caption=\"Plotting only one half of the heatmap\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_3\"\n            caption=\"Seaborn heatmap customization: grid\"\n            linkTo=\"/371-surface-plot\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"450px\", margin: \"0 auto\" }}>\n          <Link to={\"/371-surface-plot\"}>\n            <ChartImage imgName=\"371_3D_Surface_plot_volcano_4\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Animated 3d\"><Matplotlib />Three dimensional plot and animation</h2>\n        <p>\n          You can build an animation from a 3d chart by changing the camera position at each iteration of a loop. The example below\n          explains how to do it for a surface plot but visit the animation section for more.\n        </p>\n        <Link to={\"/342-animation-on-3d-plot\"}>\n          <img src={volcanoGif} alt=\"Animated volcano plot with Python\" style={{ maxWidth: \"900px\", width: \"100%\" }} />\n        </Link>\n        <Link to=\"/animation\">\n          <Button size=\"sm\">Animation section</Button>\n        </Link>\n      </Container>\n\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","export default __webpack_public_path__ + \"static/animated_volcano-df4d07818ba89edb4168e26f0160cdf4.gif\";"],"names":["allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","ThreeD","title","isTocEnabled","seoDescription","description","id","size","style","maxWidth","margin","href","src","volcanoGif","width","chartFamily"],"sourceRoot":""}