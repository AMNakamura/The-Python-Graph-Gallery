{"version":3,"file":"component---src-pages-3-d-js-822014e8964b36715742.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/3d.js","webpack://the-python-graph-gallery/./static/graph/animated_volcano.gif"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport Spacing from \"../components/Spacing\";\nimport ChartImage from \"../components/ChartImage\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport volcanoGif from \"../../static/graph/animated_volcano.gif\"\n\nconst chartDescription =\n  \"<p>Python allows to build 3D charts thanks to the <code>mplot3d</code> toolkit of the <code>matplotlib</code> library. However, please note that 3d charts are most often a bad practice. This section focuses on 3d scatter plots and surface plots that are some interesting use cases.\";\n\nconst quickCode = `# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n\n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['X'], df['Y'], df['Z'], c='skyblue', s=60)\nax.view_init(30, 185)\nplt.show()\n`\n\nexport default function ThreeD() {\n\n  return (\n\n    <Layout title=\"Three-Dimensional plotting\" isTocEnabled seoDescription=\"A collection of 3d chart examples made with Python, coming with explanation and reproducible code\">\n\n\n      <TitleAndDescription\n        title=\"Three-Dimensional plotting\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>mplot3d</code> toolkit of <code>matplotlib</code> is used here.</p>\n            <ul>\n              <li>The projection parameter of the add_subplot() function is set to <code>3d</code></li>\n              <li>The usual <code>scatter()</code> function can now be called with 3 data inputs for the X, Y and Z axis</li>\n              <li>The camera position can be set thanks to the <code>view_init()</code> function</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/370-3d-scatterplot\"}>\n              <ChartImage imgName=\"370_3D_scatterplot\"\n                caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <Link to=\"/341-python-gapminder-animation\">\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Mind the 3d</h2>\n          <p>Three dimensional objects are very popular but negatively affect\n            the <u>accuracy</u> and <u>speed</u> at which one can interpret a graphic in most cases.</p>\n          <p>In the example below, the brown section in front looks much bigger than the pink section in the back,\n          even tough their real values are 30% vs 35%. Data is distorted.\n          </p>\n          <div style={{ maxWidth: \"350px\", margin: \"0 auto\" }}>\n            <a href=\"https://www.data-to-viz.com/caveat/3d.html\">\n              <ChartImage imgName={'3d_is_bad'} caption={\"An example of a bad 3d pie chart\"} />\n            </a>\n          </div>\n          <a href='https://www.data-to-viz.com/caveat/3d.html'>\n            <Button size=\"sm\">Full article</Button>\n          </a>\n          <br /><br />\n          <p><u>Note</u>: remember pie charts should be avoided <a href='https://www.data-to-viz.com/caveat/pie.html'>most of the time</a></p>\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"3d scatterplot\"><Matplotlib />Three-dimensional scatterplots with <code>Matplotlib</code></h2>\n        <p>\n          As described in the quick start section above, a three dimensional can be built with python thanks to the\n          <code>mplot3d</code> toolkit of <code>matplotlib</code>. The example below will guide you through its usage\n          to get this figure:\n        </p>\n        <div style={{ maxWidth: \"450px\" }}>\n          <Link to={\"/370-3d-scatterplot\"}>\n            <ChartImage imgName=\"370_3D_scatterplot\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n          </Link>\n        </div>\n        <p>This technique is useful to visualize the result of a PCA (Principal Component Analysis). The following example explains how to run\n        a PCA with python and check its result with a 3d scatterplot:\n        </p>\n        <div style={{ maxWidth: \"450px\" }}>\n          <Link to=\"/372-3d-pca-result\">\n            <ChartImage imgName={'372_3D_PCA_result'} caption={\"PCA result shown as a 3D scatterplot with python\"} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Surface plot\"><Matplotlib />Surface plot with <code>Matplotlib</code></h2>\n        <p>\n          A surface plot considers the X and Y coordinates as latitude and longitude, and Z as the altitude. It\n          represents the dataset as a surface by interpolating positions between data points.\n        </p>\n        <p>This kind of chart can also be done thanks to the <code>mplot3d</code> toolkit of <code>matplotlib</code>. The\n        posts linked below explain how to use and customize the <code>trisurf()</code> function that is used for surface plots.</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_1\"\n            caption=\"Most basic surface plot with Python\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_2\"\n            caption=\"Plotting only one half of the heatmap\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_3\"\n            caption=\"Seaborn heatmap customization: grid\"\n            linkTo=\"/371-surface-plot\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"450px\", margin: \"0 auto\" }}>\n          <Link to={\"/371-surface-plot\"}>\n            <ChartImage imgName=\"371_3D_Surface_plot_volcano_4\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\" />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Animated 3d\"><Matplotlib />Three dimensional plot and animation</h2>\n        <p>\n          You can build an animation from a 3d chart by changing the camera position at each iteration of a loop. The example below\n          explains how to do it for a surface plot but visit the animation section for more.\n        </p>\n        <Link to={\"/342-animation-on-3d-plot\"}>\n          <img src={volcanoGif} alt=\"Animated volcano plot with Python\" style={{ maxWidth: \"900px\", width: \"100%\" }} />\n        </Link>\n        <Link to=\"/animation\">\n          <Button size=\"sm\">Animation section</Button>\n        </Link>\n      </Container>\n\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","export default __webpack_public_path__ + \"static/animated_volcano-df4d07818ba89edb4168e26f0160cdf4.gif\";"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","ThreeD","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Button","size","Spacing","style","maxWidth","margin","href","Matplotlib","src","volcanoGif","width","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}