{"version":3,"file":"component---src-pages-waffle-chart-js-447b6203f0ec52b85f39.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/waffle-chart.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport ChartImage from '../components/ChartImage';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com\">Waffle Chart</a> represents\n      categorical data using a <b>grid</b> of <b>equally sized squares</b> or\n      rectangles, each colored or shaded to depict different categories or\n      segments.\n    </p>\n    <p>\n      Python enables the creation of waffle charts through the{' '}\n      <code>PyWaffle</code>\n      library. This page offers numerous examples of charts built using the\n      PyWaffle library, ranging from <b>basic</b> implementations to more{' '}\n      <b>advanced</b> customizations.\n    </p>\n  </>\n);\n\nconst quickCode = `# useful libraries, including pyWaffle\nimport matplotlib.pyplot as plt\nfrom pywaffle import Waffle\n\n# create simple dummy data\ndata = {'Kevin': 10, 'Joseph': 7, 'Yan': 8}\n\n# Basic waffle\nplt.figure(\n  FigureClass=Waffle,\n  rows=5,\n  columns=20,\n  values=data,\n  legend={'loc': 'upper left', 'bbox_to_anchor': (1.05, 1)},\n)\nplt.show()\n`.trim();\n\nexport default function Pie() {\n  return (\n    <Layout\n      title=\"Waffle chart\"\n      isTocEnabled\n      seoDescription=\"A collection of Waffle chart examples made with Python and the PyWaffle library, coming with explanation and reproducible code\"\n    >\n      <TitleAndDescription\n        title=\"Waffle chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The PyWaffle library allows to build a waffle chart easily thanks\n              to its <code>Waffle</code> class.\n            </p>\n            <p>\n              The input data is a <b>dictionary</b> with names as keys and\n              associated integer values.\n            </p>\n            <p>\n              The number of rows and columns can be set with the{' '}\n              <code>rows</code> and <code>columns</code> arguments:\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/pie-plot-matplotlib-basic'}>\n              <ChartImage\n                imgName=\"503-waffle-chart-introduction-1\"\n                caption=\"Most basic waffle chart with Python and the pyWaffle library.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          Pie chart with <code>PyWaffle</code>\n        </h2>\n        <p>\n          The examples below should guide you through the <code>Waffle</code>{' '}\n          class usage. It starts with a very basic example and then provides\n          hints on how to apply usual customization like <b>using icons</b> or\n          showing <b>percentages</b> in the legend.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-1\"\n            caption=\"Basic waffle chart\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-2\"\n            caption=\"Waffle chart with Icons instead of squares\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-3\"\n            caption=\"Waffle chart with proportions in the legend.\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","href","quickCode","trim","Pie","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}