{"version":3,"file":"component---src-pages-line-chart-js-e2bd07dd7b9ccf72cc5a.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/line-chart.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/line.html'>line chart</a> displays the evolution of one or several numeric variables. It is one of the most common chart type, so it can be build using any python viz library, like <code>matplotlib</code>, <code>seaborn</code> or <code>plotly</code>. This kind of basic chart type can also be learned in this <a target='_blank' href='https://datacamp.pxf.io/YgNDbR'>online course</a>.</p>\";\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create data\nvalues=np.cumsum(np.random.randn(1000,1))\n\n# use the plot function\nplt.plot(values)\n`\n\nexport default function LinePlot() {\n\n  return (\n\n    <Layout title=\"Line chart\" isTocEnabled seoDescription=\"A collection of line chart examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Line Chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Making a simple line chart with <code>matplotlib</code> is pretty straightforward thanks to the <code>plot()</code> function.</p>\n            <p>If you provide only a series of values, it will consider that these values are ordered and will use values from 1 to n to create the X axis.ðŸ”¥</p>\n            <p>For more control on the chart, see the dedicated section below.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/120-line-chart-with-matplotlib\"}>\n              <ChartImage imgName=\"120_Basic_lineplot2\"\n                caption=\"A basic line chart made with python and seaborn\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Line chart with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build line charts thanks to its <code>plot()</code> function. The <Link to='/120-line-chart-with-matplotlib'>first chart</Link> of\n          this section explains how to use <code>plot()</code> from any kind of data input format. The <Link to='/121-line-chart-customization'>next one</Link> goes deep\n          into chart customization (line width, color aspect and more). A common need is to build a <Link to=\"/line-chart-dual-y-axis-with-matplotlib\">dual Y axis line chart</Link>, but be mindful of the <a href=\"https://www.data-to-viz.com/caveat/dual_axis.html\">caveats</a> that go with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"120_Basic_lineplot1\"\n            caption=\"How to build a basic line chart with python from any kind of input format\"\n            linkTo=\"/120-line-chart-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"121_Custom_line_plot3\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/121-line-chart-customization\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"area-fill-between-two-lines-in-matplotlib\"\n            caption=\"Fill the gap between 2 line charts\"\n            linkTo=\"/area-fill-between-two-lines-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Multiple groups\"><Matplotlib />Line chart with several groups (<code>Matplotlib</code>)</h2>\n        <p>\n          A line chart with multiple groups allows to show the evolution of several items on the same figure. It\n          is powerful but can quickly turn into a <a href='https://www.data-to-viz.com/caveat/spaghetti.html'>spaghetti chart</a>: when too many lines are displayed they get hard to\n          read. The examples below explain how to build one, and what are the alternative to show your data a better way.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple_v2\"\n            caption=\"Line chart and small multiple\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-line-chart-with-labels-at-line-end\"}>\n              <ChartImage imgName={\"web-line-chart-with-labels-at-line-end\"} caption={\"How to add labels at the end of each line with matplotlib. Definitely better than using a legend!\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-time-series-and-facetting-with-matplotlib\"}>\n              <ChartImage imgName={\"web-time-series-and-facetting-with-matplotlib-square\"} caption={\"Display 2 line charts and fill the area between both. Also uses faceting to split by groups.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-highlighted-lineplot-with-faceting\"}>\n              <ChartImage imgName={\"web-highlighted-lineplot-with-faceting\"} caption={\"A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-lineplots-and-area-chart-the-economist\"}>\n              <ChartImage imgName={\"web-lineplots-and-area-chart-the-economist-square1\"} caption={\"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-multiple-lines-and-panels\"}>\n              <ChartImage imgName={\"web-multiple-lines-and-panels\"} caption={\"Multiple grouped line charts with a beautiful color palette and customized title and annotation.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","LinePlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","Matplotlib","href","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}