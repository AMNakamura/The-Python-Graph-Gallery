{"version":3,"file":"component---src-pages-bubble-plot-js-7e7ec92f008d1d6fa23b.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/bubble-plot.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\";\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/bubble.html'>bubble plot</a> is a <a href='https://www.python-graph-gallery.com/scatter-plot'>scatterplot</a> where the circle size is mapped to the value of a third numeric variable. This section shows many bubble plots made with <code>Python</code>, using both the <code>Matplotlib</code> and <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom gapminder import gapminder # data set\n\n# data\ndata = gapminder.loc[gapminder.year == 2007]\n\n# use the scatterplot function to build the bubble map\nsns.scatterplot(data=data, x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", legend=False, sizes=(20, 2000))\n\n# show the graph\nplt.show()\n`;\n\nexport default function BubblePlot() {\n  return (\n    <Layout\n      title=\"Bubble plot\"\n      isTocEnabled\n      seoDescription=\"A collection of bubble chart examples made with Python, coming with explanation and reproducible code\"\n    >\n      <TitleAndDescription title=\"Bubble plot\" description={chartDescription} />\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The <code>scatterplot()</code> function of <code>seaborn</code>{\" \"}\n              also allows to build bubble charts. Indeed, it has a{\" \"}\n              <code>size</code> parameter that controls circle size according to\n              a numeric variable of the dataset.ðŸ”¥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/bubble-plot-with-seaborn\"}>\n              <ChartImage\n                imgName=\"bubble-plot-with-seaborn\"\n                caption=\"Basic bubble chart with Python and Seaborn.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Bubble plot with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is the best tool to quickly build a quality\n          bubble chart. The example below are based on the famous{\" \"}\n          <code>gapminder</code> dataset that shows the relationship between gdp\n          per capita, life expectancy and population of world countries.\n        </p>\n        <p>\n          The examples below start simple by calling the{\" \"}\n          <code>scatterplot()</code> function with the minimum set of\n          parameters. It then show how to change bubble colors to represent a\n          fourth variable, improve general styling, tweak the legend and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"bubble-plot-with-seaborn\"\n            caption=\"Basic bubble chart with Python and Seaborn.\"\n            linkTo=\"/bubble-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Bubble plot with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As for <Link to=\"/scatter-plot\">scatterplots</Link>,{\" \"}\n          <code>Matplotlib</code> will help us build a bubble plot thanks to the\n          the <code>plt.scatter()</code> function. This function provides a{\" \"}\n          <code>s</code> parameter allowing to pass a third variable that will\n          be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"270_Basic_Bubble_plot\"\n            caption=\"Most basic bubble plot with Python and Matplotlib\"\n            linkTo=\"/270-basic-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization1\"\n            caption=\"Bubble plot customization: color\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization2\"\n            caption=\"Bubble plot customization: shape\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization3\"\n            caption=\"Bubble plot customization: size\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization4\"\n            caption=\"Bubble plot customization: stroke\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n        </Row>\n        <p>\n          Note that it is a common practice to map a fourth variable to the\n          markers colors thanks to the <code>c</code> parameter. This way,\n          you're now looking a 4 variables in the same time, on the same chart\n          ðŸŽ‰.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"272_Bubble_plot_with_mapped_color\"\n            caption=\"A bubble chart width 4 dimensions: x, y, size & color\"\n            linkTo=\"/272-map-a-color-to-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"bubble-plot-gapminder\"\n            caption=\"Bubble plot of the gapminder dataset\"\n            linkTo=\"/341-python-gapminder-animation\"\n          />\n        </Row>\n        <p>\n          A very common task when it comes to bubble chart is to add a proper\n          legend to explain what colors and sizes mean. The blogpost below is a\n          deep-dive into matplotlib legend and should be of great help for this\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"custom-legend-with-matplotlib6\"\n            caption=\"Legend customization: how to control location, add a background, customize labels and markers and more\"\n            linkTo=\"/custom-legend-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\">\n          <Matplotlib />\n          From the web\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{\" \"}\n          <a href=\"https://www.python-graph-gallery.com\">\n            Python graph gallery\n          </a>{\" \"}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{\" \"}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-text-repel-with-matplotlib\"}>\n              <ChartImage\n                imgName={\"web-text-repel-with-matplotlib-square\"}\n                caption={\n                  \"Learn how to use the adjustText library to add many labels with no overlaps.\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link\n              to={\"/web-scatterplot-text-annotation-and-regression-matplotlib\"}\n            >\n              <ChartImage\n                imgName={\n                  \"web-scatterplot-text-annotation-and-regression-matplotlib-square\"\n                }\n                caption={\n                  \"Scatterplot with regression fit, group colors and non-overlapping labels.\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={\"/web-scatterplot-astronaut\"}>\n              <ChartImage\n                imgName={\"web-scatterplot-astronaut-square\"}\n                caption={\n                  \"Dark mode scatterplot with custom annotations, title and explanations. All of that with a very good appearance!\"\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","chartDescription","quickCode","BubblePlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","description","Spacing","Container","id","Row","CodeChunk","Seaborn","Matplotlib","href","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}