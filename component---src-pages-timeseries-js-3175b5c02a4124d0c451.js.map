{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/timeseries.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","Pie","title","isTocEnabled","seoDescription","description","id","className","href","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"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","file":"component---src-pages-timeseries-js-3175b5c02a4124d0c451.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>Timeseries charts refer to all charts representing the evolution of a numeric value. <a href='https://www.python-graph-gallery.com/line-chart/'>Line chart</a>, <a href='https://www.python-graph-gallery.com/streamchart/'>streamgraph</a>, <a href='https://www.python-graph-gallery.com/barplot/'>barplot</a>, <a href='https://www.python-graph-gallery.com/area-plot/'>area chart</a>: they all can be used for timeseries visualization. This section displays many timeseries examples made with Python, Matplotlib and other libraries.</p>\";\n\n\n  const quickCode = `# libraries\n  import matplotlib.pyplot as plt\n  import numpy as np\n\n  # create data\n  values=np.cumsum(np.random.randn(1000,1))\n\n  # use the plot function\n  plt.plot(values)\n  `\n\nexport default function Pie() {\n\n  return (\n\n    <Layout title=\"Timeseries\" isTocEnabled seoDescription=\"A collection of timeseries examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Timeseries\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Making a simple line chart with <code>matplotlib</code> is pretty straightforward thanks to the <code>plot()</code> function.</p>\n            <p>If you provide only a series of values, it will consider that these values are ordered and will use values from 1 to n to create the X axis.ðŸ”¥</p>\n            <p>For more control on the chart, see the dedicated section below.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/120-line-chart-with-matplotlib\"}>\n              <ChartImage imgName=\"120_Basic_lineplot2\"\n                caption=\"The most basic histogram one can make with python and seaborn\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Area\">Area charts for timeseries</h2>\n        <p>\n          <Link to='/area-plot'>Area charts</Link> are very often used for timeseries visualization. They are\n          particularly adapted when there is only 1 series to display. When several\n          groups must be displayed, they can still be used using faceting.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"242_area_chart_and_faceting\"\n            caption=\"Area chart for timeseries with facting to display many groups\"\n            linkTo=\"/242-area-chart-and-faceting\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Line\">Line charts for timeseries</h2>\n        <p>\n          <Link to='/line-chart'>Line charts</Link> are probably the most common type of viz for timeseries. They are\n          particularly adapted when several groups must be displayed to compare their evolution. But mind\n          the <a href='data to viz spaghetti'>spaghetti plot</a>: too many groups make the figure unreadable.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>\n          A set of publication ready charts for timeseries. They are made with python\n          and <a href='A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.'>matplotlib</a> and\n          use a high level of customization.</p>\n        <p>\n          The <Link to='/web-line-chart-with-labels-at-line-end'>first example</Link> is a line chart showing how to add labels at the end of each series\n          for better readability. The <Link to='/web-lollipop-plot-with-python-the-office'>second</Link> shows how to use lollipop to display the evolution of a deviation around a trend.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"web-line-chart-with-labels-at-line-end\"\n            caption=\"How to add labels at the end of each line with matplotlib. Definitely better than using a legend!\"\n            linkTo=\"/web-line-chart-with-labels-at-line-end\"\n          />\n          <ChartImageContainer\n            imgName=\"web-lollipop-plot-with-python-the-office-square\"\n            caption=\"A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.\"\n            linkTo=\"/web-lollipop-plot-with-python-the-office\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}