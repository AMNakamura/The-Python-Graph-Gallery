{"version":3,"file":"component---src-pages-stacked-area-plot-js-25fa466c5481380865de.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/stacked-area-plot.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\nimport { Script } from 'gatsby';\n\nfunction getAdThriveScriptUrl() {\n  if (typeof window === 'undefined') {\n    return '';\n  }\n  const w = window;\n  w.adthrive = w.adthrive || {};\n  w.adthrive.cmd = w.adthrive.cmd || [];\n  w.adthrive.plugin = 'adthrive-ads-manual';\n  w.adthrive.host = 'ads.adthrive.com';\n  return (\n    'https://' +\n    w.adthrive.host +\n    '/sites/6434366c7ccf1c58d32ab68f/ads.min.js?referrer=' +\n    w.encodeURIComponent(w.location.href) +\n    '&cb=' +\n    (Math.floor(Math.random() * 100) + 1)\n  );\n}\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto|Montserrat\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <Script id=\"adthrive\" strategy=\"idle\" src={getAdThriveScriptUrl()} />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Pandas } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { Button } from 'react-bootstrap';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/stackedarea.html'>stacked area chart</a> displays the evolution of a numeric variable for several groups of a dataset. Each group is displayed on top of each other, making it easy to read the evolution of the total, but hard to read each group value accurately. In python, stacked area charts are mainly done thanks to the <code>stackplot()</code> function</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny1=[1,4,6,8,9]\ny2=[2,2,7,10,12]\ny3=[2,8,5,10,6]\n\n# Basic stacked area chart.\nplt.stackplot(x,y1, y2, y3, labels=['A','B','C'])\nplt.legend(loc='upper left')\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Stacked area chart\"\n    seoDesciption=\"A collection of stacked area chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function StackedAreaPlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Stacked area Chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Here is a quick start code snippet to demo how the{' '}\n              <code>stackplot()</code> function of <code>matplotlib</code>{' '}\n              works.\n            </p>\n            <p>\n              Note that here each groups are provided in its own vector of\n              values. The{' '}\n              <Link to=\"/250-basic-stacked-area-chart\">basic stacked area</Link>{' '}\n              blog post explains how to use the function from any type of data\n              format.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/250-basic-stacked-area-chart'}>\n              <ChartImage\n                imgName=\"250_basic_stacked_area_chart\"\n                caption=\"The most basic stacked area chart one can make with python and matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; The issue with stacking</h2>\n          <p>\n            Stacked area charts must be used with care since they suffer a\n            number of caveats. They are appropriate to study the evolution of\n            the whole and the relative proportions of each group, but not to\n            study the evolution of each individual group.\n          </p>\n          <p>\n            For instance, it is pretty hard to understand how the green group\n            evolves on the chart below. Can you spot if its value is increasing,\n            decreasing or stable?\n          </p>\n          <a href=\"https://www.data-to-viz.com/caveat/stacking.html\">\n            <Button size=\"sm\">Read more</Button>\n          </a>\n          <div style={{ maxWidth: '400px', margin: '0 auto', padding: 30 }}>\n            <a href=\"https://www.data-to-viz.com/caveat/stacking.html\">\n              <ChartImage\n                imgName={'issue-with-stacking'}\n                caption={'It is hard to see how the green group evolves.'}\n              />\n            </a>\n          </div>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Stacked Area chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is the most common way to build a stacked area\n          chart with Python. The examples below start by explaining to basics of\n          the <code>stackplot()</code> function. The also describe the most\n          common type of customization like changing colors, controling group\n          order and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"250_basic_stacked_area_chart\"\n            caption=\"Most basic stacked area chart\"\n            linkTo=\"/250-basic-stacked-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"251_seaborn_style_on_stacked_area_chart\"\n            caption=\"Apply seaborn style on the matplotlib stacked area chart\"\n            linkTo=\"/251-stacked-area-chart-with-seaborn-style\"\n          />\n          <ChartImageContainer\n            imgName=\"253_color_and_stacked_area_chart2\"\n            caption=\"Control area colors\"\n            linkTo=\"/253-control-the-color-in-stacked-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"242_area_chart_and_faceting\"\n            caption=\"Area chart and small multiple\"\n            linkTo=\"/242-area-chart-and-faceting\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"tip\">\n        <Container>\n          <h2 id=\"Workaround\">\n            &#128161; The <code>baseline</code> parameter\n          </h2>\n          <p>\n            It is important to note that the <code>stackplot()</code> function\n            of <code>matplotlib</code> has a<code>baseline</code> parameter.\n            This parameter controls how groups are displayed around the x axis,\n            what allows to mimic a <Link to=\"/streamchart\">streamgraph</Link>.\n          </p>\n          <Link to=\"/252-baseline-options-for-stacked-area-chart\">\n            <Button size=\"sm\">Read more</Button>\n          </Link>\n          <div style={{ maxWidth: '600px', margin: '0 auto', padding: 30 }}>\n            <Link to=\"/252-baseline-options-for-stacked-area-chart\">\n              <ChartImage\n                imgName={'252_baseline_and_stacked_area_chart'}\n                caption={'It is hard to see how the green group evolves.'}\n              />\n            </Link>\n          </div>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Percent stacked\">\n          <Matplotlib />\n          Percent Stacked Area chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          A variation of the stacked area graph is the percent stacked area\n          graph where the value of every groups are normalized at each time\n          stamp. It allows to study the percentage of each group in the whole\n          more efficiently.\n        </p>\n        <p>\n          Fortunately, the <code>pandas</code> library has a{' '}\n          <code>divide()</code> function that allows to apply this normalization\n          easily.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"255_percent_stacked_area_chart\"\n            caption=\"Basic percent stacked area chart\"\n            linkTo=\"/255-percentage-stacked-area-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">\n          <Pandas />\n          Stacked Area chart with <code>Pandas</code>\n        </h2>\n        <p>\n          <code>Pandas</code> is mainly useful to normalize your dataset and\n          build a stacked area chart. Surprisingly, it also provides a{' '}\n          <code>plot.area()</code>\n          that can be handy to build a stacked area chart.\n        </p>\n        <div style={{ maxWidth: '600px', margin: '0 auto', padding: 30 }}>\n          <Link to=\"/254-pandas-stacked-area-chart\">\n            <ChartImage\n              imgName={'254_pandas_stacked_area_chart2'}\n              caption={'Stacked area chart with Pandas'}\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From the web\">\n          <Matplotlib />\n          From the web\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://www.python-graph-gallery.com\">\n            Python graph gallery\n          </a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-stacked-line-chart-with-labels'}>\n              <ChartImage\n                imgName={'web-stacked-line-chart-with-labels-square'}\n                caption={\n                  'A clean stacked area chart with smoothing, inline labels, caption, color palette and more'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-lineplots-and-area-chart-the-economist'}>\n              <ChartImage\n                imgName={'web-lineplots-and-area-chart-the-economist-square2'}\n                caption={\n                  \"Learn how to mimick The Economist's style with a figure combining both a line and an area chart\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-line-chart-with-labels-at-line-end'}>\n              <ChartImage\n                imgName={'web-line-chart-with-labels-at-line-end'}\n                caption={\n                  'Not a stacked area but a line chart. But shows how to add labels at the end of each group with matplotlib. Definitely better than using a legend!'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","getAdThriveScriptUrl","window","w","adthrive","cmd","plugin","host","encodeURIComponent","location","href","Math","floor","random","SEO","title","seoDescription","keywords","rel","content","property","Script","id","strategy","src","chartDescription","quickCode","Head","seoDesciption","StackedAreaPlot","Layout","isTocEnabled","TitleAndDescription","description","Container","Row","CodeChunk","Spacing","Button","size","style","maxWidth","margin","padding","Matplotlib","Pandas","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}