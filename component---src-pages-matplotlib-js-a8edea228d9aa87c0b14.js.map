{"version":3,"file":"component---src-pages-matplotlib-js-a8edea228d9aa87c0b14.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButton.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/pages/matplotlib.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"name\", \"className\", \"checked\", \"type\", \"onChange\", \"value\", \"disabled\", \"inputRef\"];\nimport classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport Button from './Button';\n\nvar noop = function noop() {\n  return undefined;\n};\n\nvar ToggleButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      name = _ref.name,\n      className = _ref.className,\n      checked = _ref.checked,\n      type = _ref.type,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      disabled = _ref.disabled,\n      inputRef = _ref.inputRef,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var handleFocus = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(true);\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, focused && 'focus', disabled && 'disabled'),\n    type: undefined,\n    active: !!checked,\n    as: \"label\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    value: value,\n    ref: inputRef,\n    autoComplete: \"off\",\n    checked: !!checked,\n    disabled: !!disabled,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChange: onChange || noop\n  }), children);\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","\nimport React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Col, ToggleButton } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p><code>Matplotlib</code> is the most famous library for data visualization with <code>python</code>. It allows to create literally every type of chart with a great level of customization. This page provides some general tips that can be applied on any kind of chart made with <code>matplotlib</code> like customizing titles or colors. If you're looking at creating a specific chart type, visit <a href='https://www.python-graph-gallery.com'>the gallery</a> instead.</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny=[1,4,6,8,4]\n\n# Area plot\nplt.fill_between(x, y)\nplt.show()\n`\n\nconst pyplotAPI = `# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create a data frame\ndf = pd.DataFrame ({'Group':  ['A', 'B', 'C', 'D', 'E'], 'Value': [1,5,4,3,9]})\n\n# Create horizontal bars\nplt.barh(y=df.Group, width=df.Value);\n\n# Add title\nplt.title('A simple barplot');\n`\nconst objOrientedAPI = `# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create a data frame\ndf = pd.DataFrame ({'Group':  ['A', 'B', 'C', 'D', 'E'], 'Value': [1,5,4,3,9]})\n\n# Initialize a Figure and an Axes\nfig, ax = plt.subplots()\n\n# Fig size\nfig.set_size_inches(9,9)\n\n# Create horizontal bars\nax.barh(y=df.Group, width=df.Value);\n\n# Add title\nax.set_title('A simple barplot');\n`\n\nconst allStyle = ['seaborn-darkgrid', 'seaborn-notebook', 'classic', 'seaborn-ticks', 'grayscale', 'bmh', 'seaborn-talk', 'dark_background', 'ggplot', 'fivethirtyeight', '_classic_test', 'seaborn-colorblind', 'seaborn-deep', 'seaborn-whitegrid', 'seaborn-bright', 'seaborn-poster', 'seaborn-muted', 'seaborn-paper', 'seaborn-white', 'seaborn-pastel', 'seaborn-dark', 'seaborn', 'seaborn-dark-palette']\n\n\nexport default function Matplotlibs() {\n\n  const [selectedParameter, setSelectedParameter] = React.useState(allStyle[0])\n\n  const allStyleButtons = allStyle.map(\n    (item, i) =>\n      <ToggleButton\n        type=\"radio\"\n        active={true}\n        key={i}\n        className={\"functionButton\"}\n        variant=\"secondary\"\n        size=\"sm\"\n        value={item}\n        checked={selectedParameter === item}\n        onChange={(e) => setSelectedParameter(e.currentTarget.value)}\n      >\n        {item}\n      </ToggleButton>\n  )\n\n  return (\n\n    <Layout title=\"Matplotlib\" isTocEnabled seoDescription=\"A collection of charts, tips and tricks on the Matplotlib Python library.\">\n\n      <TitleAndDescription\n        title=\"Matplotlib\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>Matplotlib</code> is the most famous python data visualization library. It is widely used and most of other viz libraries (like <code>seaborn</code>)\n            are actually built on top of it.</p>\n            <p>Once installed, matplotlib must be imported, usually using <code>import matplotlib.pyplot as plt</code>. You can then use use the functions available in the <code>plt</code> object.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/240-basic-area-chart\"}>\n              <ChartImage imgName=\"240_basic_area_chart\"\n                caption=\"The most basic area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Lexicon\"><Matplotlib />Basic vocabulary</h2>\n        <p>\n          The figure below describes the anatomy of a <code>matplotlib</code> charts. It names all the main components,\n          names that you need to know to understand the documentation properly.\n        </p>\n        <p>\n          &#9888;&#65039; <u>Disclaimer</u>: this figure comes from the very complete <a href='https://matplotlib.org/faq/usage_faq.html#coding-styles'>matplotlib documentation</a>. Have a look at it\n          for a thorough explanation on how this library works.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <ChartImage imgName={'matplotlib_vocabulary'} caption={'Anatomy of a matplotlib chart: all the basic vocabulary you need to know to understand the documentation properly'} />\n        </div>\n        <a href='https://matplotlib.org/faq/usage_faq.html#coding-styles'>\n          <Button size=\"sm\">Matplotlib doc</Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"APIs\"><Matplotlib />Two distinct APIs</h2>\n        <p>\n          There are 2 main ways to build a chart with matplotlib: the <code>pyplot API</code> and the <code>object-oriented API</code>.\n        </p>\n        <p>➡️ <code>pyplot API</code></p>\n        <p>Pyplot is a collection of functions, each function applying a change to a figure. For\n          instance, <code>plt.barh()</code> will build a barplot and <code>plt.title()</code> will\n          add a title to it.\n        </p>\n        <CodeChunk>{pyplotAPI}</CodeChunk>\n\n        <br /><br />\n        <p>➡️ <code>object oriented API</code></p>\n        <p>The object oriented API usually starts by initializing one <code>Figure</code> object and\n        one or more <code>Axes</code> object using the <code>subplot()</code> function. Then the methods of those objects\n        will be used to apply changes to the chart.</p>\n        <CodeChunk>{objOrientedAPI}</CodeChunk>\n\n        <br /><br />\n        <p>See how the syntax slightly differs between both options? (<code>plt.title</code> versus <code>ax.set_title()</code>. This\n        is pretty confusing and I advise to have a look to the <a href='https://matplotlib.org/stable/api/index.html#usage-patterns'>official documentation</a> for a\n        more thorough explanation. In the gallery, both APIs are used.</p>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Title\"><Matplotlib />Customizing titles</h2>\n        <p>\n          The title is a key part of a good chart. It has to <u>summarize</u> its key message in a few words. Always avoid to simply\n          repeat what is displayed on each axis. Try to provide some more insight allowing to understand the main result instead.\n        </p>\n        <p>The <Link to='/190-custom-matplotlib-title'>post #190</Link> goes in depth on how to customize the <code>matplotlib</code>\n        title. All the main types of change are descried: changing\n        its color, adding a subtitle, using math formulas and so on. Give it a go!\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"190_Custom_title6\"\n            caption=\"Python chart with subtitle and custom color\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title7\"\n            caption=\"Add a math formula in title with Matplotlib\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title5\"\n            caption=\"Control the height of the matplotlib title\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Annotation\"><Matplotlib />Annotation</h2>\n        <p>\n          Annotation is a key part of a great visualization. It transforms a simple chart\n          in a whole piece of story telling. Before you share your graph with anyone,\n          make sure the key insight are highlighted with labels, shapes or color.\n        </p>\n        <p>\n          All those kind of annotation are built thanks to various matplotlib functions\n          like <code>annotate()</code> or <code>add_patch()</code>. The blogposts showcased below should get you started\n          with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"193_annotate1\"\n            caption=\"Add a label with a segment\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate2\"\n            caption=\"Add a square to highlight an area\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate3\"\n            caption=\"Add a circle to highlight an area\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate4\"\n            caption=\"Add a segment\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate5\"\n            caption=\"Add vertical and horizontal ablines\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate6\"\n            caption=\"Annotate with an equation\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n        <h2 id=\"Cheatsheets\">✨ Cheatsheets</h2>\n          <p>\n            It's pretty hard to remember all the matplotlib associated vocabulary. The <Link to=\"/cheat-sheets\">cheatsheet section</Link> is\n            here to help, with a few sheets that you'll probably want to use on a daily basis.\n          </p>\n          <Row>\n            <Col xs={12} md={4}>\n              <Link to=\"/cheat-sheets\">\n                <ChartImage imgName={'matplotlib_cheat_sheet'} caption={'Matplotlib cheatsheet by Datacamp'} />\n              </Link>\n            </Col>\n            <Col xs={12} md={4}>\n              <Link to=\"/cheat-sheets\">\n                <ChartImage imgName={'matplotlib-python-official-cheatsheet1'} caption={'Official Matplotlib cheatsheet (page 1)'} />\n              </Link>\n            </Col>\n            <Col xs={12} md={4}>\n              <Link to=\"/cheat-sheets\">\n                <ChartImage imgName={'matplotlib-python-official-cheatsheet2'} caption={'Official Matplotlib cheatsheet (page 2)'} />\n              </Link>\n            </Col>\n          </Row>\n        <br/>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Font\"><Matplotlib />Custom fonts</h2>\n        <p>\n          Using custom fonts adds a nice touch to your graph and make it shine among all the other plots\n          using defaults. The blog-post below will guide you through the process: installing a font\n          and calling it with matplotlib functions.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/custom-fonts-in-matplotlib'>\n            <ChartImage imgName={'custom-fonts-in-matplotlib'} caption={'How to use custom fonts with matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Margin\"><Matplotlib />Add margin around a <code>matplotlib</code> chart</h2>\n        <p>\n          It is a common struggle to deal with the margins around the chart. Fortunately this\n          is pretty straightforward thanks to the <code>subplots_adjust()</code> function as explained in the examples\n          below.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"192_increase_margin2\"\n            caption=\"Increase the bottom margin of a matplotlib chart.\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n          <ChartImageContainer\n            imgName=\"192_increase_margin4\"\n            caption=\"Increase the top margin to fit a title\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Subplot\"><Matplotlib />Split the figure in subplots</h2>\n        <p>\n          It can be really useful to split your graphic window in several\n          parts, in order to display several charts in the same time.\n          The <code>subplot()</code> function of <code>matplotlib</code> allows to\n          do it quickly with a great level of customization.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot4\"\n            caption=\"Split the figure in 4 charts of same size.\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Split the figure with a custom layout\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot9\"\n            caption=\"Manage chart size on subplots\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Theme\"><Matplotlib />Available style sheets</h2>\n        <p>\n          <code>Matplotlib</code> comes with a set of 26 pre-built themes to style your chart easily. <Link to='/199-matplotlib-style-sheets'>This post</Link> is\n           dedicated to this feature, explaining how to use <code>plt.style.use()</code> to pick a theme up.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/199-matplotlib-style-sheets'>\n            <ChartImage imgName={'199-matplotlib-style-sheets-538-full'} caption={'Customize a matplotlib chart with a preset theme'} />\n          </Link>\n        </div>\n\n\n\n\n\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Axis\"><Matplotlib />Customizing axis</h2>\n        <p>\n          <code>Matplotlib</code> allows every kind of axis configuration. It is mainly done thanks\n          to the <code>tick_params()</code>, <code>xticks()</code> and <code>xlabels()</code> functions.\n          The <Link to='/191-custom-axis-on-matplotlib-chart'>post #191</Link> will guide you through all the possibilities.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"191_Custom_axis1\"\n            caption=\"Change the axis title and its appearance\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis2\"\n            caption=\"Control axis labels and ticks look\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis6\"\n            caption=\"Control axis limit with the xlim() function\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"names":["_excluded","noop","ToggleButton","_ref","ref","children","name","className","checked","type","onChange","value","disabled","inputRef","props","_useState","useState","focused","setFocused","handleFocus","useCallback","e","target","tagName","handleBlur","undefined","active","as","autoComplete","onFocus","onBlur","displayName","allGifs","ChartImage","imgName","caption","includes","image","useStaticQuery","allFile","edges","find","n","node","alt","fluid","childImageSharp","ChartImageContainer","linkTo","xs","md","Link","to","allStyle","Matplotlibs","React","selectedParameter","setSelectedParameter","map","item","i","key","variant","size","currentTarget","title","isTocEnabled","seoDescription","description","id","href","style","maxWidth","margin","padding","chartFamily"],"sourceRoot":""}