{"version":3,"file":"component---src-pages-density-plot-js-f4209ec06f805bac2950.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ElementChildren.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ButtonGroup.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButtonGroup.js","webpack://the-python-graph-gallery/./src/util/functionDescriptions.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/pages/density-plot.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButton.js"],"sourcesContent":["import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`query MyQuery {\n  allFile(filter: {relativeDirectory: {eq: \"graph\"}}) {\n    edges {\n      node {\n        id\n        name\n        childImageSharp {\n          gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n        }\n      }\n    }\n  }\n}`);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return <>\n    <div className=\"chartImageContainer\">\n      <GatsbyImage\n        image={image.node.childImageSharp.gatsbyImageData}\n        alt={caption}\n        className=\"chartImageImg\" />\n      <div className=\"chartImageOverlay\">\n        <div className=\"chartImageOverlayText\">\n          <p>{caption}</p>\n        </div>\n      </div>\n    </div>\n  </>;\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical = false,\n  className,\n  role = 'group',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    role: role,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nexport default ButtonGroup;","import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = 'radio',\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, {\n    ...controlledProps,\n    ref: ref,\n    vertical: vertical,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = e => handleToggle(childVal, e);\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","export const functionDescriptions = {\n    kdeplot: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.kdeplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"fill\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'control the color', type: 'boolean', relatedChart: '70_deffffed' }\n        ]\n    },\n    violin: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.violinplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"width\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'controls the color', type: 'string', relatedChart: '70_deffffed' }\n        ]\n    }\n}\n\n\n","import { Link } from \"gatsby\";\nimport React, { useState } from \"react\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport { functionDescriptions } from \"../util/functionDescriptions\";\nimport \"./functionExploration.css\";\n\nconst capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ functionName }) {\n  // Get the right function\n  const functionInfo = functionDescriptions[functionName];\n\n  // Get the right parameter\n  const [selectedParameter, setSelectedParameter] = useState(\n    functionInfo.parameters[0].name\n  );\n  const [someString, setSomeString] = useState(\"hello\");\n  const selectedParameterInfo = functionInfo.parameters.filter(\n    (param) => param.name === selectedParameter\n  )[0];\n\n  return (\n    <>\n      <h2 id={capitalize(functionName + \"()\" + \" details\")}>\n        &#128270; <code>{functionName}</code> function parameters\n        <a\n          style={{ marginLeft: \"15px\", fontSize: \"14px\" }}\n          href={functionInfo.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <ToggleButtonGroup\n        type=\"radio\"\n        size=\"sm\"\n        name=\"functionParameter\"\n        value={selectedParameter}\n        onChange={(value) => setSelectedParameter(value)}\n      >\n        {functionInfo.parameters.map((item, i) => (\n          <ToggleButton\n            key={i}\n            // variant=\"secondary\"\n            className={\"functionButton\"}\n            id={`functionParameter-${item.name}`}\n            value={item.name}\n          >\n            {item.name}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n      <div>\n        <code>string</code>\n        <span>&rarr; {selectedParameterInfo.description}</span>\n      </div>\n      {/* <div style={{ paddingLeft: \"6px\", fontSize: \"14px\" }}><Link to={selectedParameterInfo.relatedChart}>check a chart using it</Link></div> */}\n      <br />\n      <br />\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport FunctionExploration from '../components/FunctionExploration'\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>Density plots allow you to visualize the distribution of a numeric variable for one or several groups. They are very well adapted for large datasets, as stated in data-to-viz.com. Note that 2 approaches exist to build them in python: the first one consists of computing a kernel density estimate, and the second one involves building a high resolution histogram.</p>\";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# Make default density plot\nsns.kdeplot(df['sepal_width'])\n`\n\nexport default function DensityPlot() {\n\n  return (\n\n    <Layout title=\"Density chart\" isTocEnabled seoDescription=\"A collection of density plot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Density chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick start\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>If you are in a rush, the most straightforward way to build a density chart is to use <code>Seaborn</code> and its <code>kdeplot()</code> function. You just need to provide it with a numeric variable from your dataset. 🔥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/70-basic-density-plot-with-seaborn\"}>\n              <ChartImage imgName=\"70_Basic_density_plot_Seaborn\"\n                caption=\"The most basic density plot one can make with python and seaborn\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Density charts with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is a python library allowing to make better\n          charts easily. It is well adapted to build density charts thanks to\n          its <code>kdeplot</code> function. The following charts will guide you\n          through its usage, going from a very{\" \"}\n          <Link to=\"\">basic density plot</Link> to something much more{\" \"}\n          <Link to=\"\">customized</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"70_Basic_density_plot_Seaborn\"\n            caption=\"The most basic density plot one can make with python and seaborn\"\n            linkTo=\"/70-basic-density-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"71_Shaded_density_plot_Seaborn\"\n            caption=\"seaborn densty chart with filled area\"\n            linkTo=\"/71-density-plot-with-shade-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"72_Horizontal_density_plot_Seaborn\"\n            caption=\"vertical seaborn density chart\"\n            linkTo=\"/72-horizontal-density-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"73_Control_bandwidth_densityplot_Seaborn1\"\n            caption=\"control density chart color\"\n            linkTo=\"/73-control-bandwidth-of-seaborn-density-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"73_Control_bandwidth_densityplot_Seaborn2\"\n            caption=\"Changed the bandwidth used to compute the density\"\n            linkTo=\"/73-control-bandwidth-of-seaborn-density-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"74_density_plot_multi_variables\"\n            caption=\"Density chart with several displayed groups\"\n            linkTo=\"/74-density-plot-of-several-variables\"\n          />\n          <ChartImageContainer\n            imgName=\"density-mirror\"\n            caption=\"Mirror density chart to compare the distribution of 2 variables\"\n            linkTo=\"/density-mirror\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Multiple groups\"><Seaborn />Density charts, <code>Seaborn</code> and multiple groups</h2>\n        <p>\n          It is a common use case to compare the density of several groups in a dataset. Several options\n          exist to do so. You can plot all items on the same chart, using transparency and annotation\n          to make the comparison possible. Or you can a technique called small multiples where the graph window\n          is split in individual charts, avoiding group overlaps that are sometimes hard to read.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"density-chart-multiple-groups-seaborn1\"\n            caption=\"Density chart with multiple groups overlapped\"\n            linkTo=\"/density-chart-multiple-groups-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"density-chart-multiple-groups-seaborn3\"\n            caption=\"Density chart with multiple groups overlapped\"\n            linkTo=\"/density-chart-multiple-groups-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"density-chart-multiple-groups-seaborn4\"\n            caption=\"Density chart with multiple groups overlapped\"\n            linkTo=\"/density-chart-multiple-groups-seaborn\"\n          />\n        </Row>\n        <div style={{ margin: \"0 auto\", padding: 0 }}>\n          <Link to='/density-chart-multiple-groups-seaborn'>\n            <ChartImage imgName='density-chart-multiple-groups-seaborn5' caption={'A density chart with multiple groups displayed, transparency and clean annotation.'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration functionName={\"kdeplot\"} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib /> Density charts with <code>Matplotlib</code></h2>\n        <p>\n          It is possible to build a density chart with <code>matplotlib</code>, but it is truely a\n          struggle compared to making it with <code>seaborn</code> as shown above. Here is an example\n          to prove it is doable, but I strongly advise to go for <code>seaborn</code>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"density-chart-matplotlib-vector\"\n            caption=\"Basic density chart with python and matplotlib from a vector of data\"\n            linkTo=\"/density-chart-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"density-chart-matplotlib-csv\"\n            caption=\"Read a csv file and plot the density of a column\"\n            linkTo=\"/density-chart-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"distribution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Button from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst noop = () => undefined;\nconst ToggleButton = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  name,\n  className,\n  checked,\n  type,\n  onChange,\n  value,\n  disabled,\n  id,\n  inputRef,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'btn-check');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      className: bsPrefix,\n      name: name,\n      type: type,\n      value: value,\n      ref: inputRef,\n      autoComplete: \"off\",\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange || noop,\n      id: id\n    }), /*#__PURE__*/_jsx(Button, {\n      ...props,\n      ref: ref,\n      className: classNames(className, disabled && 'disabled'),\n      type: undefined,\n      role: undefined,\n      as: \"label\",\n      htmlFor: id\n    })]\n  });\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","map","children","func","index","child","ButtonGroup","bsPrefix","size","vertical","role","as","Component","rest","ref","prefix","baseClass","displayName","ToggleButtonGroup","props","type","value","onChange","controlledProps","getValues","concat","values","childVal","childOnChange","checked","indexOf","e","inputVal","event","isActive","filter","handleToggle","Object","assign","Button","ToggleButton","functionDescriptions","kdeplot","description","docUrl","basicUsage","parameters","relatedChart","violin","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","functionName","functionInfo","selectedParameter","setSelectedParameter","useState","someString","setSomeString","selectedParameterInfo","param","id","style","marginLeft","fontSize","href","item","i","key","chartDescription","quickCode","DensityPlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","Container","Row","CodeChunk","Spacing","Seaborn","margin","padding","Matplotlib","ChartFamilySection","chartFamily","Contact","noop","disabled","inputRef","autoComplete","undefined","htmlFor"],"sourceRoot":""}