{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./node_modules/react-bootstrap/esm/Row.js","webpack:///./src/components/TitleAndDescription.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./node_modules/react-bootstrap/esm/Col.js","webpack:///./src/components/ChartImage.js","webpack:///./src/pages/circular-barplot.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","DEVICE_SIZES","Row","forwardRef","_ref","ref","bsPrefix","noGutters","_ref$as","as","Component","props","decoratedBsPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","createElement","apply","concat","displayName","defaultProps","TitleAndDescription","title","description","chartInfo","chart","id","dangerouslySetInnerHTML","__html","style","marginTop","fullUrlToInternalLink","pythonURL","size","label","href","dataToVizURL","ChartImageContainer","imgName","linkTo","xs","md","Col","prefix","spans","span","offset","order","_propValue$span","length","allGifs","ChartImage","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","CircularBarplot","isTocEnabled","seoDescription","maxWidth","margin","padding","chartFamily","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection","allLogos","key"],"mappings":"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","file":"component---src-pages-circular-barplot-js-51b7305b7c56b402ccc5.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"noGutters\", \"as\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import \"./titleAndDescription.css\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SocialMediaButtons from \"./SocialMediaButtons\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"gatsby\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n// import Sponsors from \"../components/Sponsors\";\n\n// Note that the description received is a string that contains html.\n// It was not possible to pass JSX since it is sometimes passed directly from\n// the python notebooks metadata\nexport default function TitleAndDescription({ title, description, chartType }) {\n  const chartInfo = chartTypesInfo.filter((chart) => chart.id === chartType)[0];\n\n  return (\n    <>\n      <div className=\"titleAndDescription\">\n        <h1 className=\"mainTitle\">{title}</h1>\n        <hr className=\"smallHr\" />\n        <SocialMediaButtons />\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n        {chartType && (\n          <div style={{ marginTop: \"10px\" }}>\n            <Link to={fullUrlToInternalLink(chartInfo.pythonURL)}>\n              <Button size=\"sm\">{chartInfo.label + \" section\"}</Button>\n            </Link>\n            <a href={chartInfo.dataToVizURL}>\n              <Button size=\"sm\">About this chart</Button>\n            </a>\n          </div>\n        )}\n      </div>\n      {/* <Sponsors /> */}\n    </>\n  );\n}\n\nTitleAndDescription.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  chartType: PropTypes.string\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span;\n    var offset;\n    var order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport Spacing from \"../components/Spacing\";\nimport { Link } from \"gatsby\";\nimport ChartImage from \"../components/ChartImage\";\nimport { Col } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/circularbarplot.html'>circular barplot</a> is pretty much the same as a <a href='https://www.python-graph-gallery.com/barplot'>barplot</a>, but using polar coordinates instead of cartesian coordinates. They are a bit tricky to build with <code>Python</code> and less accurate than usual barplot, but they come with an eye-catching effect that sometimes make them worth it.</p>\";\n\n\nexport default function CircularBarplot() {\n\n  return (\n\n    <Layout title=\"Circular Barplot\" isTocEnabled seoDescription=\"A collection of circular barplot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Circular Barplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Circular barplot with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> allows to build circular barplots thanks to the <code>polar</code> Layout\n          option of the <code>subplot()</code> function. Examples below should guide you from\n          the most simple version to some more customization.\n        </p>\n        <p>It starts by explaining how the polar coordinates of <code>matplotlib</code> works, show how to use it to draw bars\n          and finally goes into the trickiness of adding labels.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"circular-barplot-basic1\"\n            caption=\"Explanation of the polar coordinates with Matplotlib.\"\n            linkTo=\"/circular-barplot-basic\"\n          />\n          <ChartImageContainer\n            imgName=\"circular-barplot-basic2\"\n            caption=\"Most basic circular barplot with Python and Matplotlib.\"\n            linkTo=\"/circular-barplot-basic\"\n          />\n          <ChartImageContainer\n            imgName=\"circular-barplot-basic4\"\n            caption=\"Reorder items.\"\n            linkTo=\"/circular-barplot-basic\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"800px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/circular-barplot-basic'>\n            <ChartImage imgName={'circular-barplot-basic3'} caption={'Circular barplot with labels'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"From the web\"><Matplotlib />From the web</h2>\n        <p>The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>).\n          The <a href=\"https://www.python-graph-gallery.com\">Python graph gallery</a> tries to\n          display (or translate from R) some of the best creations and explain how their source\n          code works. If you want to display your work here, please drop me a word or\n          even better, submit a <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">Pull Request</a>!\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-circular-barplot-with-matplotlib\"}>\n              <ChartImage imgName={\"web-circular-barplot-with-matplotlib-square\"} caption={\"A circular barchart with several features per group made with Python and Matplotlib.\"} />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={\"/web-circular-lollipop-plot-with-matplotlib\"}>\n              <ChartImage imgName={\"web-circular-lollipop-plot-with-matplotlib-square\"} caption={\"A circular lollipop plot with customized layout, great color palette and in circle legend.\"} />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}