{"version":3,"file":"component---src-pages-3-d-js-a7771f5e8d3feb19a661.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/3d.js","webpack://the-python-graph-gallery/./static/graph/animated_volcano.gif"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto|Montserrat\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport ChartImage from '../components/ChartImage';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport volcanoGif from '../../static/graph/animated_volcano.gif';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  '<p>Python allows to build 3D charts thanks to the <code>mplot3d</code> toolkit of the <code>matplotlib</code> library. However, please note that 3d charts are most often a bad practice. This section focuses on 3d scatter plots and surface plots that are some interesting use cases.';\n\nconst quickCode = `# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n\n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['X'], df['Y'], df['Z'], c='skyblue', s=60)\nax.view_init(30, 185)\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Three-Dimensional plotting\"\n    seoDescription=\"A collection of 2d density chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function ThreeD() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Three-Dimensional plotting\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The <code>mplot3d</code> toolkit of <code>matplotlib</code> is\n              used here.\n            </p>\n            <ul>\n              <li>\n                The projection parameter of the add_subplot() function is set to{' '}\n                <code>3d</code>\n              </li>\n              <li>\n                The usual <code>scatter()</code> function can now be called with\n                3 data inputs for the X, Y and Z axis\n              </li>\n              <li>\n                The camera position can be set thanks to the{' '}\n                <code>view_init()</code> function\n              </li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={'/370-3d-scatterplot'}>\n              <ChartImage\n                imgName=\"370_3D_scatterplot\"\n                caption=\"Basic 3d scatterplot with Python & Matplotlib.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <Link to=\"/341-python-gapminder-animation\">\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Mind the 3d</h2>\n          <p>\n            Three dimensional objects are very popular but negatively affect the{' '}\n            <u>accuracy</u> and <u>speed</u> at which one can interpret a\n            graphic in most cases.\n          </p>\n          <p>\n            In the example below, the brown section in front looks much bigger\n            than the pink section in the back, even tough their real values are\n            30% vs 35%. Data is distorted.\n          </p>\n          <div style={{ maxWidth: '350px', margin: '0 auto' }}>\n            <a href=\"https://www.data-to-viz.com/caveat/3d.html\">\n              <ChartImage\n                imgName={'3d_is_bad'}\n                caption={'An example of a bad 3d pie chart'}\n              />\n            </a>\n          </div>\n          <a href=\"https://www.data-to-viz.com/caveat/3d.html\">\n            <Button size=\"sm\">Full article</Button>\n          </a>\n          <br />\n          <br />\n          <p>\n            <u>Note</u>: remember pie charts should be avoided{' '}\n            <a href=\"https://www.data-to-viz.com/caveat/pie.html\">\n              most of the time\n            </a>\n          </p>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"3d scatterplot\">\n          <Matplotlib />\n          Three-dimensional scatterplots with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As described in the quick start section above, a three dimensional can\n          be built with python thanks to the\n          <code>mplot3d</code> toolkit of <code>matplotlib</code>. The example\n          below will guide you through its usage to get this figure:\n        </p>\n        <div style={{ maxWidth: '450px' }}>\n          <Link to={'/370-3d-scatterplot'}>\n            <ChartImage\n              imgName=\"370_3D_scatterplot\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\"\n            />\n          </Link>\n        </div>\n        <p>\n          This technique is useful to visualize the result of a PCA (Principal\n          Component Analysis). The following example explains how to run a PCA\n          with python and check its result with a 3d scatterplot:\n        </p>\n        <div style={{ maxWidth: '450px' }}>\n          <Link to=\"/372-3d-pca-result\">\n            <ChartImage\n              imgName={'372_3D_PCA_result'}\n              caption={'PCA result shown as a 3D scatterplot with python'}\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Surface plot\">\n          <Matplotlib />\n          Surface plot with <code>Matplotlib</code>\n        </h2>\n        <p>\n          A surface plot considers the X and Y coordinates as latitude and\n          longitude, and Z as the altitude. It represents the dataset as a\n          surface by interpolating positions between data points.\n        </p>\n        <p>\n          This kind of chart can also be done thanks to the <code>mplot3d</code>{' '}\n          toolkit of <code>matplotlib</code>. The posts linked below explain how\n          to use and customize the <code>trisurf()</code> function that is used\n          for surface plots.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_1\"\n            caption=\"Most basic surface plot with Python\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_2\"\n            caption=\"Plotting only one half of the heatmap\"\n            linkTo=\"/371-surface-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"371_3D_Surface_plot_volcano_3\"\n            caption=\"Seaborn heatmap customization: grid\"\n            linkTo=\"/371-surface-plot\"\n          />\n        </Row>\n        <div style={{ maxWidth: '450px', margin: '0 auto' }}>\n          <Link to={'/371-surface-plot'}>\n            <ChartImage\n              imgName=\"371_3D_Surface_plot_volcano_4\"\n              caption=\"Basic 3d scatterplot with Python & Matplotlib.\"\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Animated 3d\">\n          <Matplotlib />\n          Three dimensional plot and animation\n        </h2>\n        <p>\n          You can build an animation from a 3d chart by changing the camera\n          position at each iteration of a loop. The example below explains how\n          to do it for a surface plot but visit the animation section for more.\n        </p>\n        <Link to={'/342-animation-on-3d-plot'}>\n          <img\n            src={volcanoGif}\n            alt=\"Animated volcano plot with Python\"\n            style={{ maxWidth: '900px', width: '100%' }}\n          />\n        </Link>\n        <Link to=\"/animation\">\n          <Button size=\"sm\">Animation section</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","export default __webpack_public_path__ + \"static/animated_volcano-df4d07818ba89edb4168e26f0160cdf4.gif\";"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","href","rel","content","property","chartDescription","quickCode","Head","ThreeD","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Button","size","Spacing","style","maxWidth","margin","Matplotlib","src","volcanoGif","width","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}